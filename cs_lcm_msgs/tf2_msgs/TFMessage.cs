/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace tf2_msgs
{
    public sealed class TFMessage : LCM.LCM.LCMEncodable
    {
        public int transforms_length;
        public geometry_msgs.TransformStamped[] transforms;
 
        public TFMessage()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x37bc5cbce50a5ce2L;
 
        static TFMessage()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("tf2_msgs.TFMessage"))
                return 0L;
 
            classes.Add("tf2_msgs.TFMessage");
            ulong hash = LCM_FINGERPRINT_BASE
                 + geometry_msgs.TransformStamped._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.transforms_length); 
 
            for (int a = 0; a < this.transforms_length; a++) {
                this.transforms[a]._encodeRecursive(outs); 
            }
 
        }
 
        public TFMessage(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public TFMessage(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static tf2_msgs.TFMessage _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            tf2_msgs.TFMessage o = new tf2_msgs.TFMessage();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.transforms_length = ins.ReadInt32();
 
            this.transforms = new geometry_msgs.TransformStamped[(int) transforms_length];
            for (int a = 0; a < this.transforms_length; a++) {
                this.transforms[a] = geometry_msgs.TransformStamped._decodeRecursiveFactory(ins);
            }
 
        }
 
        public tf2_msgs.TFMessage Copy()
        {
            tf2_msgs.TFMessage outobj = new tf2_msgs.TFMessage();
            outobj.transforms_length = this.transforms_length;
 
            outobj.transforms = new geometry_msgs.TransformStamped[(int) transforms_length];
            for (int a = 0; a < this.transforms_length; a++) {
                outobj.transforms[a] = this.transforms[a].Copy();
            }
 
            return outobj;
        }
    }
}

