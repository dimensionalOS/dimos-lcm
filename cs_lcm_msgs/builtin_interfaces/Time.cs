/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace builtin_interfaces
{
    public sealed class Time : LCM.LCM.LCMEncodable
    {
        public int sec;
        public int nanosec;
 
        public Time()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x263f39efa2a9af63L;
 
        static Time()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("builtin_interfaces.Time"))
                return 0L;
 
            classes.Add("builtin_interfaces.Time");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.sec); 
 
            outs.Write(this.nanosec); 
 
        }
 
        public Time(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Time(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static builtin_interfaces.Time _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            builtin_interfaces.Time o = new builtin_interfaces.Time();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.sec = ins.ReadInt32();
 
            this.nanosec = ins.ReadInt32();
 
        }
 
        public builtin_interfaces.Time Copy()
        {
            builtin_interfaces.Time outobj = new builtin_interfaces.Time();
            outobj.sec = this.sec;
 
            outobj.nanosec = this.nanosec;
 
            return outobj;
        }
    }
}

