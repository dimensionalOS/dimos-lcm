/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace shape_msgs
{
    public sealed class SolidPrimitive : LCM.LCM.LCMEncodable
    {
        public int dimensions_length;
        public byte type;
        public double[] dimensions;
 
        public SolidPrimitive()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xb8a8e7178cab07acL;
 
        public const int BOX = 1;
        public const int SPHERE = 2;
        public const int CYLINDER = 3;
        public const int CONE = 4;
        public const int BOX_X = 0;
        public const int BOX_Y = 1;
        public const int BOX_Z = 2;
        public const int SPHERE_RADIUS = 0;
        public const int CYLINDER_HEIGHT = 0;
        public const int CYLINDER_RADIUS = 1;
        public const int CONE_HEIGHT = 0;
        public const int CONE_RADIUS = 1;

        static SolidPrimitive()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("shape_msgs.SolidPrimitive"))
                return 0L;
 
            classes.Add("shape_msgs.SolidPrimitive");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.dimensions_length); 
 
            outs.Write(this.type); 
 
            for (int a = 0; a < this.dimensions_length; a++) {
                outs.Write(this.dimensions[a]); 
            }
 
        }
 
        public SolidPrimitive(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public SolidPrimitive(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static shape_msgs.SolidPrimitive _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            shape_msgs.SolidPrimitive o = new shape_msgs.SolidPrimitive();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.dimensions_length = ins.ReadInt32();
 
            this.type = ins.ReadByte();
 
            this.dimensions = new double[(int) dimensions_length];
            for (int a = 0; a < this.dimensions_length; a++) {
                this.dimensions[a] = ins.ReadDouble();
            }
 
        }
 
        public shape_msgs.SolidPrimitive Copy()
        {
            shape_msgs.SolidPrimitive outobj = new shape_msgs.SolidPrimitive();
            outobj.dimensions_length = this.dimensions_length;
 
            outobj.type = this.type;
 
            outobj.dimensions = new double[(int) dimensions_length];
            for (int a = 0; a < this.dimensions_length; a++) {
                outobj.dimensions[a] = this.dimensions[a];
            }
 
            return outobj;
        }
    }
}

