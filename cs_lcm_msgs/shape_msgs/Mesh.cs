/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace shape_msgs
{
    public sealed class Mesh : LCM.LCM.LCMEncodable
    {
        public int triangles_length;
        public int vertices_length;
        public shape_msgs.MeshTriangle[] triangles;
        public geometry_msgs.Point[] vertices;
 
        public Mesh()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xdc739fb8d2f81ab9L;
 
        static Mesh()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("shape_msgs.Mesh"))
                return 0L;
 
            classes.Add("shape_msgs.Mesh");
            ulong hash = LCM_FINGERPRINT_BASE
                 + shape_msgs.MeshTriangle._hashRecursive(classes)
                 + geometry_msgs.Point._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.triangles_length); 
 
            outs.Write(this.vertices_length); 
 
            for (int a = 0; a < this.triangles_length; a++) {
                this.triangles[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.vertices_length; a++) {
                this.vertices[a]._encodeRecursive(outs); 
            }
 
        }
 
        public Mesh(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Mesh(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static shape_msgs.Mesh _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            shape_msgs.Mesh o = new shape_msgs.Mesh();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.triangles_length = ins.ReadInt32();
 
            this.vertices_length = ins.ReadInt32();
 
            this.triangles = new shape_msgs.MeshTriangle[(int) triangles_length];
            for (int a = 0; a < this.triangles_length; a++) {
                this.triangles[a] = shape_msgs.MeshTriangle._decodeRecursiveFactory(ins);
            }
 
            this.vertices = new geometry_msgs.Point[(int) vertices_length];
            for (int a = 0; a < this.vertices_length; a++) {
                this.vertices[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
            }
 
        }
 
        public shape_msgs.Mesh Copy()
        {
            shape_msgs.Mesh outobj = new shape_msgs.Mesh();
            outobj.triangles_length = this.triangles_length;
 
            outobj.vertices_length = this.vertices_length;
 
            outobj.triangles = new shape_msgs.MeshTriangle[(int) triangles_length];
            for (int a = 0; a < this.triangles_length; a++) {
                outobj.triangles[a] = this.triangles[a].Copy();
            }
 
            outobj.vertices = new geometry_msgs.Point[(int) vertices_length];
            for (int a = 0; a < this.vertices_length; a++) {
                outobj.vertices[a] = this.vertices[a].Copy();
            }
 
            return outobj;
        }
    }
}

