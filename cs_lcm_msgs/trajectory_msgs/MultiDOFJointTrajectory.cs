/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace trajectory_msgs
{
    public sealed class MultiDOFJointTrajectory : LCM.LCM.LCMEncodable
    {
        public int joint_names_length;
        public int points_length;
        public std_msgs.Header header;
        public String[] joint_names;
        public trajectory_msgs.MultiDOFJointTrajectoryPoint[] points;
 
        public MultiDOFJointTrajectory()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xf09db31afe774086L;
 
        static MultiDOFJointTrajectory()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("trajectory_msgs.MultiDOFJointTrajectory"))
                return 0L;
 
            classes.Add("trajectory_msgs.MultiDOFJointTrajectory");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + trajectory_msgs.MultiDOFJointTrajectoryPoint._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.joint_names_length); 
 
            outs.Write(this.points_length); 
 
            this.header._encodeRecursive(outs); 
 
            for (int a = 0; a < this.joint_names_length; a++) {
                __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.joint_names[a]); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
            }
 
            for (int a = 0; a < this.points_length; a++) {
                this.points[a]._encodeRecursive(outs); 
            }
 
        }
 
        public MultiDOFJointTrajectory(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public MultiDOFJointTrajectory(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static trajectory_msgs.MultiDOFJointTrajectory _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            trajectory_msgs.MultiDOFJointTrajectory o = new trajectory_msgs.MultiDOFJointTrajectory();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.joint_names_length = ins.ReadInt32();
 
            this.points_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.joint_names = new String[(int) joint_names_length];
            for (int a = 0; a < this.joint_names_length; a++) {
                __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.joint_names[a] = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
            }
 
            this.points = new trajectory_msgs.MultiDOFJointTrajectoryPoint[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                this.points[a] = trajectory_msgs.MultiDOFJointTrajectoryPoint._decodeRecursiveFactory(ins);
            }
 
        }
 
        public trajectory_msgs.MultiDOFJointTrajectory Copy()
        {
            trajectory_msgs.MultiDOFJointTrajectory outobj = new trajectory_msgs.MultiDOFJointTrajectory();
            outobj.joint_names_length = this.joint_names_length;
 
            outobj.points_length = this.points_length;
 
            outobj.header = this.header.Copy();
 
            outobj.joint_names = new String[(int) joint_names_length];
            for (int a = 0; a < this.joint_names_length; a++) {
                outobj.joint_names[a] = this.joint_names[a];
            }
 
            outobj.points = new trajectory_msgs.MultiDOFJointTrajectoryPoint[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                outobj.points[a] = this.points[a].Copy();
            }
 
            return outobj;
        }
    }
}

