/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace trajectory_msgs
{
    public sealed class JointTrajectoryPoint : LCM.LCM.LCMEncodable
    {
        public int positions_length;
        public int velocities_length;
        public int accelerations_length;
        public int effort_length;
        public double[] positions;
        public double[] velocities;
        public double[] accelerations;
        public double[] effort;
        public std_msgs.Duration time_from_start;
 
        public JointTrajectoryPoint()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x5f17dcae9da98292L;
 
        static JointTrajectoryPoint()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("trajectory_msgs.JointTrajectoryPoint"))
                return 0L;
 
            classes.Add("trajectory_msgs.JointTrajectoryPoint");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Duration._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.positions_length); 
 
            outs.Write(this.velocities_length); 
 
            outs.Write(this.accelerations_length); 
 
            outs.Write(this.effort_length); 
 
            for (int a = 0; a < this.positions_length; a++) {
                outs.Write(this.positions[a]); 
            }
 
            for (int a = 0; a < this.velocities_length; a++) {
                outs.Write(this.velocities[a]); 
            }
 
            for (int a = 0; a < this.accelerations_length; a++) {
                outs.Write(this.accelerations[a]); 
            }
 
            for (int a = 0; a < this.effort_length; a++) {
                outs.Write(this.effort[a]); 
            }
 
            this.time_from_start._encodeRecursive(outs); 
 
        }
 
        public JointTrajectoryPoint(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public JointTrajectoryPoint(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static trajectory_msgs.JointTrajectoryPoint _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            trajectory_msgs.JointTrajectoryPoint o = new trajectory_msgs.JointTrajectoryPoint();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.positions_length = ins.ReadInt32();
 
            this.velocities_length = ins.ReadInt32();
 
            this.accelerations_length = ins.ReadInt32();
 
            this.effort_length = ins.ReadInt32();
 
            this.positions = new double[(int) positions_length];
            for (int a = 0; a < this.positions_length; a++) {
                this.positions[a] = ins.ReadDouble();
            }
 
            this.velocities = new double[(int) velocities_length];
            for (int a = 0; a < this.velocities_length; a++) {
                this.velocities[a] = ins.ReadDouble();
            }
 
            this.accelerations = new double[(int) accelerations_length];
            for (int a = 0; a < this.accelerations_length; a++) {
                this.accelerations[a] = ins.ReadDouble();
            }
 
            this.effort = new double[(int) effort_length];
            for (int a = 0; a < this.effort_length; a++) {
                this.effort[a] = ins.ReadDouble();
            }
 
            this.time_from_start = std_msgs.Duration._decodeRecursiveFactory(ins);
 
        }
 
        public trajectory_msgs.JointTrajectoryPoint Copy()
        {
            trajectory_msgs.JointTrajectoryPoint outobj = new trajectory_msgs.JointTrajectoryPoint();
            outobj.positions_length = this.positions_length;
 
            outobj.velocities_length = this.velocities_length;
 
            outobj.accelerations_length = this.accelerations_length;
 
            outobj.effort_length = this.effort_length;
 
            outobj.positions = new double[(int) positions_length];
            for (int a = 0; a < this.positions_length; a++) {
                outobj.positions[a] = this.positions[a];
            }
 
            outobj.velocities = new double[(int) velocities_length];
            for (int a = 0; a < this.velocities_length; a++) {
                outobj.velocities[a] = this.velocities[a];
            }
 
            outobj.accelerations = new double[(int) accelerations_length];
            for (int a = 0; a < this.accelerations_length; a++) {
                outobj.accelerations[a] = this.accelerations[a];
            }
 
            outobj.effort = new double[(int) effort_length];
            for (int a = 0; a < this.effort_length; a++) {
                outobj.effort[a] = this.effort[a];
            }
 
            outobj.time_from_start = this.time_from_start.Copy();
 
            return outobj;
        }
    }
}

