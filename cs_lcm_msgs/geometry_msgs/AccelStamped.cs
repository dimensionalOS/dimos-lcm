/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace geometry_msgs
{
    public sealed class AccelStamped : LCM.LCM.LCMEncodable
    {
        public std_msgs.Header header;
        public geometry_msgs.Accel accel;
 
        public AccelStamped()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xf012322e268930c2L;
 
        static AccelStamped()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("geometry_msgs.AccelStamped"))
                return 0L;
 
            classes.Add("geometry_msgs.AccelStamped");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Accel._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            this.accel._encodeRecursive(outs); 
 
        }
 
        public AccelStamped(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public AccelStamped(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static geometry_msgs.AccelStamped _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            geometry_msgs.AccelStamped o = new geometry_msgs.AccelStamped();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.accel = geometry_msgs.Accel._decodeRecursiveFactory(ins);
 
        }
 
        public geometry_msgs.AccelStamped Copy()
        {
            geometry_msgs.AccelStamped outobj = new geometry_msgs.AccelStamped();
            outobj.header = this.header.Copy();
 
            outobj.accel = this.accel.Copy();
 
            return outobj;
        }
    }
}

