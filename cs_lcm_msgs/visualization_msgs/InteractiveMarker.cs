/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace visualization_msgs
{
    public sealed class InteractiveMarker : LCM.LCM.LCMEncodable
    {
        public int menu_entries_length;
        public int controls_length;
        public std_msgs.Header header;
        public geometry_msgs.Pose pose;
        public String name;
        public String description;
        public float scale;
        public visualization_msgs.MenuEntry[] menu_entries;
        public visualization_msgs.InteractiveMarkerControl[] controls;
 
        public InteractiveMarker()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xe9ed8e5f9a72545fL;
 
        static InteractiveMarker()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("visualization_msgs.InteractiveMarker"))
                return 0L;
 
            classes.Add("visualization_msgs.InteractiveMarker");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Pose._hashRecursive(classes)
                 + visualization_msgs.MenuEntry._hashRecursive(classes)
                 + visualization_msgs.InteractiveMarkerControl._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.menu_entries_length); 
 
            outs.Write(this.controls_length); 
 
            this.header._encodeRecursive(outs); 
 
            this.pose._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.description); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.scale); 
 
            for (int a = 0; a < this.menu_entries_length; a++) {
                this.menu_entries[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.controls_length; a++) {
                this.controls[a]._encodeRecursive(outs); 
            }
 
        }
 
        public InteractiveMarker(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public InteractiveMarker(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static visualization_msgs.InteractiveMarker _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            visualization_msgs.InteractiveMarker o = new visualization_msgs.InteractiveMarker();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.menu_entries_length = ins.ReadInt32();
 
            this.controls_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.description = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.scale = ins.ReadSingle();
 
            this.menu_entries = new visualization_msgs.MenuEntry[(int) menu_entries_length];
            for (int a = 0; a < this.menu_entries_length; a++) {
                this.menu_entries[a] = visualization_msgs.MenuEntry._decodeRecursiveFactory(ins);
            }
 
            this.controls = new visualization_msgs.InteractiveMarkerControl[(int) controls_length];
            for (int a = 0; a < this.controls_length; a++) {
                this.controls[a] = visualization_msgs.InteractiveMarkerControl._decodeRecursiveFactory(ins);
            }
 
        }
 
        public visualization_msgs.InteractiveMarker Copy()
        {
            visualization_msgs.InteractiveMarker outobj = new visualization_msgs.InteractiveMarker();
            outobj.menu_entries_length = this.menu_entries_length;
 
            outobj.controls_length = this.controls_length;
 
            outobj.header = this.header.Copy();
 
            outobj.pose = this.pose.Copy();
 
            outobj.name = this.name;
 
            outobj.description = this.description;
 
            outobj.scale = this.scale;
 
            outobj.menu_entries = new visualization_msgs.MenuEntry[(int) menu_entries_length];
            for (int a = 0; a < this.menu_entries_length; a++) {
                outobj.menu_entries[a] = this.menu_entries[a].Copy();
            }
 
            outobj.controls = new visualization_msgs.InteractiveMarkerControl[(int) controls_length];
            for (int a = 0; a < this.controls_length; a++) {
                outobj.controls[a] = this.controls[a].Copy();
            }
 
            return outobj;
        }
    }
}

