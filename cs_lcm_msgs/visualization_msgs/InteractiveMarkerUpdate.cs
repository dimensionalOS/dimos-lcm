/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace visualization_msgs
{
    public sealed class InteractiveMarkerUpdate : LCM.LCM.LCMEncodable
    {
        public int markers_length;
        public int poses_length;
        public int erases_length;
        public String server_id;
        public long seq_num;
        public byte type;
        public visualization_msgs.InteractiveMarker[] markers;
        public visualization_msgs.InteractiveMarkerPose[] poses;
        public String[] erases;
 
        public InteractiveMarkerUpdate()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xf6eebb4c4a608b4cL;
 
        public const int KEEP_ALIVE = 0;
        public const int UPDATE = 1;

        static InteractiveMarkerUpdate()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("visualization_msgs.InteractiveMarkerUpdate"))
                return 0L;
 
            classes.Add("visualization_msgs.InteractiveMarkerUpdate");
            ulong hash = LCM_FINGERPRINT_BASE
                 + visualization_msgs.InteractiveMarker._hashRecursive(classes)
                 + visualization_msgs.InteractiveMarkerPose._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.markers_length); 
 
            outs.Write(this.poses_length); 
 
            outs.Write(this.erases_length); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.server_id); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.seq_num); 
 
            outs.Write(this.type); 
 
            for (int a = 0; a < this.markers_length; a++) {
                this.markers[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.poses_length; a++) {
                this.poses[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.erases_length; a++) {
                __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.erases[a]); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
            }
 
        }
 
        public InteractiveMarkerUpdate(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public InteractiveMarkerUpdate(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static visualization_msgs.InteractiveMarkerUpdate _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            visualization_msgs.InteractiveMarkerUpdate o = new visualization_msgs.InteractiveMarkerUpdate();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.markers_length = ins.ReadInt32();
 
            this.poses_length = ins.ReadInt32();
 
            this.erases_length = ins.ReadInt32();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.server_id = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.seq_num = ins.ReadInt64();
 
            this.type = ins.ReadByte();
 
            this.markers = new visualization_msgs.InteractiveMarker[(int) markers_length];
            for (int a = 0; a < this.markers_length; a++) {
                this.markers[a] = visualization_msgs.InteractiveMarker._decodeRecursiveFactory(ins);
            }
 
            this.poses = new visualization_msgs.InteractiveMarkerPose[(int) poses_length];
            for (int a = 0; a < this.poses_length; a++) {
                this.poses[a] = visualization_msgs.InteractiveMarkerPose._decodeRecursiveFactory(ins);
            }
 
            this.erases = new String[(int) erases_length];
            for (int a = 0; a < this.erases_length; a++) {
                __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.erases[a] = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
            }
 
        }
 
        public visualization_msgs.InteractiveMarkerUpdate Copy()
        {
            visualization_msgs.InteractiveMarkerUpdate outobj = new visualization_msgs.InteractiveMarkerUpdate();
            outobj.markers_length = this.markers_length;
 
            outobj.poses_length = this.poses_length;
 
            outobj.erases_length = this.erases_length;
 
            outobj.server_id = this.server_id;
 
            outobj.seq_num = this.seq_num;
 
            outobj.type = this.type;
 
            outobj.markers = new visualization_msgs.InteractiveMarker[(int) markers_length];
            for (int a = 0; a < this.markers_length; a++) {
                outobj.markers[a] = this.markers[a].Copy();
            }
 
            outobj.poses = new visualization_msgs.InteractiveMarkerPose[(int) poses_length];
            for (int a = 0; a < this.poses_length; a++) {
                outobj.poses[a] = this.poses[a].Copy();
            }
 
            outobj.erases = new String[(int) erases_length];
            for (int a = 0; a < this.erases_length; a++) {
                outobj.erases[a] = this.erases[a];
            }
 
            return outobj;
        }
    }
}

