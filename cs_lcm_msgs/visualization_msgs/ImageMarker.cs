/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace visualization_msgs
{
    public sealed class ImageMarker : LCM.LCM.LCMEncodable
    {
        public int points_length;
        public int outline_colors_length;
        public std_msgs.Header header;
        public String ns;
        public int id;
        public int type;
        public int action;
        public geometry_msgs.Point position;
        public float scale;
        public std_msgs.ColorRGBA outline_color;
        public byte filled;
        public std_msgs.ColorRGBA fill_color;
        public std_msgs.Duration lifetime;
        public geometry_msgs.Point[] points;
        public std_msgs.ColorRGBA[] outline_colors;
 
        public ImageMarker()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x3a3ea371b474d924L;
 
        public const int CIRCLE = 0;
        public const int LINE_STRIP = 1;
        public const int LINE_LIST = 2;
        public const int POLYGON = 3;
        public const int POINTS = 4;
        public const int ADD = 0;
        public const int REMOVE = 1;

        static ImageMarker()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("visualization_msgs.ImageMarker"))
                return 0L;
 
            classes.Add("visualization_msgs.ImageMarker");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Point._hashRecursive(classes)
                 + std_msgs.ColorRGBA._hashRecursive(classes)
                 + std_msgs.ColorRGBA._hashRecursive(classes)
                 + std_msgs.Duration._hashRecursive(classes)
                 + geometry_msgs.Point._hashRecursive(classes)
                 + std_msgs.ColorRGBA._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.points_length); 
 
            outs.Write(this.outline_colors_length); 
 
            this.header._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.ns); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.id); 
 
            outs.Write(this.type); 
 
            outs.Write(this.action); 
 
            this.position._encodeRecursive(outs); 
 
            outs.Write(this.scale); 
 
            this.outline_color._encodeRecursive(outs); 
 
            outs.Write(this.filled); 
 
            this.fill_color._encodeRecursive(outs); 
 
            this.lifetime._encodeRecursive(outs); 
 
            for (int a = 0; a < this.points_length; a++) {
                this.points[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.outline_colors_length; a++) {
                this.outline_colors[a]._encodeRecursive(outs); 
            }
 
        }
 
        public ImageMarker(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public ImageMarker(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static visualization_msgs.ImageMarker _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            visualization_msgs.ImageMarker o = new visualization_msgs.ImageMarker();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.points_length = ins.ReadInt32();
 
            this.outline_colors_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.ns = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.id = ins.ReadInt32();
 
            this.type = ins.ReadInt32();
 
            this.action = ins.ReadInt32();
 
            this.position = geometry_msgs.Point._decodeRecursiveFactory(ins);
 
            this.scale = ins.ReadSingle();
 
            this.outline_color = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
 
            this.filled = ins.ReadByte();
 
            this.fill_color = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
 
            this.lifetime = std_msgs.Duration._decodeRecursiveFactory(ins);
 
            this.points = new geometry_msgs.Point[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                this.points[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
            }
 
            this.outline_colors = new std_msgs.ColorRGBA[(int) outline_colors_length];
            for (int a = 0; a < this.outline_colors_length; a++) {
                this.outline_colors[a] = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
            }
 
        }
 
        public visualization_msgs.ImageMarker Copy()
        {
            visualization_msgs.ImageMarker outobj = new visualization_msgs.ImageMarker();
            outobj.points_length = this.points_length;
 
            outobj.outline_colors_length = this.outline_colors_length;
 
            outobj.header = this.header.Copy();
 
            outobj.ns = this.ns;
 
            outobj.id = this.id;
 
            outobj.type = this.type;
 
            outobj.action = this.action;
 
            outobj.position = this.position.Copy();
 
            outobj.scale = this.scale;
 
            outobj.outline_color = this.outline_color.Copy();
 
            outobj.filled = this.filled;
 
            outobj.fill_color = this.fill_color.Copy();
 
            outobj.lifetime = this.lifetime.Copy();
 
            outobj.points = new geometry_msgs.Point[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                outobj.points[a] = this.points[a].Copy();
            }
 
            outobj.outline_colors = new std_msgs.ColorRGBA[(int) outline_colors_length];
            for (int a = 0; a < this.outline_colors_length; a++) {
                outobj.outline_colors[a] = this.outline_colors[a].Copy();
            }
 
            return outobj;
        }
    }
}

