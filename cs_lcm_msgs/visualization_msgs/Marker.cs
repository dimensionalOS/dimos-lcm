/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace visualization_msgs
{
    public sealed class Marker : LCM.LCM.LCMEncodable
    {
        public int points_length;
        public int colors_length;
        public std_msgs.Header header;
        public String ns;
        public int id;
        public int type;
        public int action;
        public geometry_msgs.Pose pose;
        public geometry_msgs.Vector3 scale;
        public std_msgs.ColorRGBA color;
        public std_msgs.Duration lifetime;
        public bool frame_locked;
        public geometry_msgs.Point[] points;
        public std_msgs.ColorRGBA[] colors;
        public String text;
        public String mesh_resource;
        public bool mesh_use_embedded_materials;
 
        public Marker()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x707e24d8bc038bd3L;
 
        public const int ARROW = 0;
        public const int CUBE = 1;
        public const int SPHERE = 2;
        public const int CYLINDER = 3;
        public const int LINE_STRIP = 4;
        public const int LINE_LIST = 5;
        public const int CUBE_LIST = 6;
        public const int SPHERE_LIST = 7;
        public const int POINTS = 8;
        public const int TEXT_VIEW_FACING = 9;
        public const int MESH_RESOURCE = 10;
        public const int TRIANGLE_LIST = 11;
        public const int ADD = 0;
        public const int MODIFY = 0;
        public const int DELETE = 2;
        public const int DELETEALL = 3;

        static Marker()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("visualization_msgs.Marker"))
                return 0L;
 
            classes.Add("visualization_msgs.Marker");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Pose._hashRecursive(classes)
                 + geometry_msgs.Vector3._hashRecursive(classes)
                 + std_msgs.ColorRGBA._hashRecursive(classes)
                 + std_msgs.Duration._hashRecursive(classes)
                 + geometry_msgs.Point._hashRecursive(classes)
                 + std_msgs.ColorRGBA._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.points_length); 
 
            outs.Write(this.colors_length); 
 
            this.header._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.ns); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.id); 
 
            outs.Write(this.type); 
 
            outs.Write(this.action); 
 
            this.pose._encodeRecursive(outs); 
 
            this.scale._encodeRecursive(outs); 
 
            this.color._encodeRecursive(outs); 
 
            this.lifetime._encodeRecursive(outs); 
 
            outs.Write(this.frame_locked); 
 
            for (int a = 0; a < this.points_length; a++) {
                this.points[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.colors_length; a++) {
                this.colors[a]._encodeRecursive(outs); 
            }
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.text); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.mesh_resource); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.mesh_use_embedded_materials); 
 
        }
 
        public Marker(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Marker(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static visualization_msgs.Marker _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            visualization_msgs.Marker o = new visualization_msgs.Marker();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.points_length = ins.ReadInt32();
 
            this.colors_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.ns = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.id = ins.ReadInt32();
 
            this.type = ins.ReadInt32();
 
            this.action = ins.ReadInt32();
 
            this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
            this.scale = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
            this.color = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
 
            this.lifetime = std_msgs.Duration._decodeRecursiveFactory(ins);
 
            this.frame_locked = ins.ReadBoolean();
 
            this.points = new geometry_msgs.Point[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                this.points[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
            }
 
            this.colors = new std_msgs.ColorRGBA[(int) colors_length];
            for (int a = 0; a < this.colors_length; a++) {
                this.colors[a] = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
            }
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.text = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.mesh_resource = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.mesh_use_embedded_materials = ins.ReadBoolean();
 
        }
 
        public visualization_msgs.Marker Copy()
        {
            visualization_msgs.Marker outobj = new visualization_msgs.Marker();
            outobj.points_length = this.points_length;
 
            outobj.colors_length = this.colors_length;
 
            outobj.header = this.header.Copy();
 
            outobj.ns = this.ns;
 
            outobj.id = this.id;
 
            outobj.type = this.type;
 
            outobj.action = this.action;
 
            outobj.pose = this.pose.Copy();
 
            outobj.scale = this.scale.Copy();
 
            outobj.color = this.color.Copy();
 
            outobj.lifetime = this.lifetime.Copy();
 
            outobj.frame_locked = this.frame_locked;
 
            outobj.points = new geometry_msgs.Point[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                outobj.points[a] = this.points[a].Copy();
            }
 
            outobj.colors = new std_msgs.ColorRGBA[(int) colors_length];
            for (int a = 0; a < this.colors_length; a++) {
                outobj.colors[a] = this.colors[a].Copy();
            }
 
            outobj.text = this.text;
 
            outobj.mesh_resource = this.mesh_resource;
 
            outobj.mesh_use_embedded_materials = this.mesh_use_embedded_materials;
 
            return outobj;
        }
    }
}

