/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace visualization_msgs
{
    public sealed class InteractiveMarkerFeedback : LCM.LCM.LCMEncodable
    {
        public std_msgs.Header header;
        public String client_id;
        public String marker_name;
        public String control_name;
        public byte event_type;
        public geometry_msgs.Pose pose;
        public int menu_entry_id;
        public geometry_msgs.Point mouse_point;
        public bool mouse_point_valid;
 
        public InteractiveMarkerFeedback()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xd44e20643fb0d4f7L;
 
        public const int KEEP_ALIVE = 0;
        public const int POSE_UPDATE = 1;
        public const int MENU_SELECT = 2;
        public const int BUTTON_CLICK = 3;
        public const int MOUSE_DOWN = 4;
        public const int MOUSE_UP = 5;

        static InteractiveMarkerFeedback()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("visualization_msgs.InteractiveMarkerFeedback"))
                return 0L;
 
            classes.Add("visualization_msgs.InteractiveMarkerFeedback");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Pose._hashRecursive(classes)
                 + geometry_msgs.Point._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            this.header._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.client_id); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.marker_name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.control_name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.event_type); 
 
            this.pose._encodeRecursive(outs); 
 
            outs.Write(this.menu_entry_id); 
 
            this.mouse_point._encodeRecursive(outs); 
 
            outs.Write(this.mouse_point_valid); 
 
        }
 
        public InteractiveMarkerFeedback(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public InteractiveMarkerFeedback(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static visualization_msgs.InteractiveMarkerFeedback _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            visualization_msgs.InteractiveMarkerFeedback o = new visualization_msgs.InteractiveMarkerFeedback();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.client_id = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.marker_name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.control_name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.event_type = ins.ReadByte();
 
            this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
            this.menu_entry_id = ins.ReadInt32();
 
            this.mouse_point = geometry_msgs.Point._decodeRecursiveFactory(ins);
 
            this.mouse_point_valid = ins.ReadBoolean();
 
        }
 
        public visualization_msgs.InteractiveMarkerFeedback Copy()
        {
            visualization_msgs.InteractiveMarkerFeedback outobj = new visualization_msgs.InteractiveMarkerFeedback();
            outobj.header = this.header.Copy();
 
            outobj.client_id = this.client_id;
 
            outobj.marker_name = this.marker_name;
 
            outobj.control_name = this.control_name;
 
            outobj.event_type = this.event_type;
 
            outobj.pose = this.pose.Copy();
 
            outobj.menu_entry_id = this.menu_entry_id;
 
            outobj.mouse_point = this.mouse_point.Copy();
 
            outobj.mouse_point_valid = this.mouse_point_valid;
 
            return outobj;
        }
    }
}

