/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class Log : LCM.LCM.LCMEncodable
    {
        public builtin_interfaces.Time timestamp;
        public byte level;
        public String message;
        public String name;
        public String file;
        public int line;
 
        public Log()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x623dae456e90a1c7L;
 
        public const int UNKNOWN = 0;
        public const int DEBUG = 1;
        public const int INFO = 2;
        public const int WARNING = 3;
        public const int ERROR = 4;
        public const int FATAL = 5;

        static Log()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.Log"))
                return 0L;
 
            classes.Add("foxglove_msgs.Log");
            ulong hash = LCM_FINGERPRINT_BASE
                 + builtin_interfaces.Time._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            this.timestamp._encodeRecursive(outs); 
 
            outs.Write(this.level); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.message); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.file); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.line); 
 
        }
 
        public Log(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Log(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.Log _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.Log o = new foxglove_msgs.Log();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
            this.level = ins.ReadByte();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.message = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.file = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.line = ins.ReadInt32();
 
        }
 
        public foxglove_msgs.Log Copy()
        {
            foxglove_msgs.Log outobj = new foxglove_msgs.Log();
            outobj.timestamp = this.timestamp.Copy();
 
            outobj.level = this.level;
 
            outobj.message = this.message;
 
            outobj.name = this.name;
 
            outobj.file = this.file;
 
            outobj.line = this.line;
 
            return outobj;
        }
    }
}

