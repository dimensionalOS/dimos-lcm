/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class CircleAnnotation : LCM.LCM.LCMEncodable
    {
        public builtin_interfaces.Time timestamp;
        public foxglove_msgs.Point2 position;
        public double diameter;
        public double thickness;
        public foxglove_msgs.Color fill_color;
        public foxglove_msgs.Color outline_color;
 
        public CircleAnnotation()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x5a3219098258887cL;
 
        static CircleAnnotation()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.CircleAnnotation"))
                return 0L;
 
            classes.Add("foxglove_msgs.CircleAnnotation");
            ulong hash = LCM_FINGERPRINT_BASE
                 + builtin_interfaces.Time._hashRecursive(classes)
                 + foxglove_msgs.Point2._hashRecursive(classes)
                 + foxglove_msgs.Color._hashRecursive(classes)
                 + foxglove_msgs.Color._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.timestamp._encodeRecursive(outs); 
 
            this.position._encodeRecursive(outs); 
 
            outs.Write(this.diameter); 
 
            outs.Write(this.thickness); 
 
            this.fill_color._encodeRecursive(outs); 
 
            this.outline_color._encodeRecursive(outs); 
 
        }
 
        public CircleAnnotation(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public CircleAnnotation(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.CircleAnnotation _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.CircleAnnotation o = new foxglove_msgs.CircleAnnotation();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
            this.position = foxglove_msgs.Point2._decodeRecursiveFactory(ins);
 
            this.diameter = ins.ReadDouble();
 
            this.thickness = ins.ReadDouble();
 
            this.fill_color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
            this.outline_color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
        }
 
        public foxglove_msgs.CircleAnnotation Copy()
        {
            foxglove_msgs.CircleAnnotation outobj = new foxglove_msgs.CircleAnnotation();
            outobj.timestamp = this.timestamp.Copy();
 
            outobj.position = this.position.Copy();
 
            outobj.diameter = this.diameter;
 
            outobj.thickness = this.thickness;
 
            outobj.fill_color = this.fill_color.Copy();
 
            outobj.outline_color = this.outline_color.Copy();
 
            return outobj;
        }
    }
}

