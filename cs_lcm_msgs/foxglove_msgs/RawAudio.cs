/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class RawAudio : LCM.LCM.LCMEncodable
    {
        public int data_length;
        public builtin_interfaces.Time timestamp;
        public byte[] data;
        public String format;
        public int sample_rate;
        public int number_of_channels;
 
        public RawAudio()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xc7f2a980cd122f7dL;
 
        static RawAudio()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.RawAudio"))
                return 0L;
 
            classes.Add("foxglove_msgs.RawAudio");
            ulong hash = LCM_FINGERPRINT_BASE
                 + builtin_interfaces.Time._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.data_length); 
 
            this.timestamp._encodeRecursive(outs); 
 
            for (int a = 0; a < this.data_length; a++) {
                outs.Write(this.data[a]); 
            }
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.format); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.sample_rate); 
 
            outs.Write(this.number_of_channels); 
 
        }
 
        public RawAudio(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public RawAudio(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.RawAudio _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.RawAudio o = new foxglove_msgs.RawAudio();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.data_length = ins.ReadInt32();
 
            this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
            this.data = new byte[(int) data_length];
            for (int a = 0; a < this.data_length; a++) {
                this.data[a] = ins.ReadByte();
            }
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.format = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.sample_rate = ins.ReadInt32();
 
            this.number_of_channels = ins.ReadInt32();
 
        }
 
        public foxglove_msgs.RawAudio Copy()
        {
            foxglove_msgs.RawAudio outobj = new foxglove_msgs.RawAudio();
            outobj.data_length = this.data_length;
 
            outobj.timestamp = this.timestamp.Copy();
 
            outobj.data = new byte[(int) data_length];
            for (int a = 0; a < this.data_length; a++) {
                outobj.data[a] = this.data[a];
            }
 
            outobj.format = this.format;
 
            outobj.sample_rate = this.sample_rate;
 
            outobj.number_of_channels = this.number_of_channels;
 
            return outobj;
        }
    }
}

