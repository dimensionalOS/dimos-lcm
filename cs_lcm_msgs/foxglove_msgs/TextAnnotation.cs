/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class TextAnnotation : LCM.LCM.LCMEncodable
    {
        public builtin_interfaces.Time timestamp;
        public foxglove_msgs.Point2 position;
        public String text;
        public double font_size;
        public foxglove_msgs.Color text_color;
        public foxglove_msgs.Color background_color;
 
        public TextAnnotation()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1354af1f564701e9L;
 
        static TextAnnotation()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.TextAnnotation"))
                return 0L;
 
            classes.Add("foxglove_msgs.TextAnnotation");
            ulong hash = LCM_FINGERPRINT_BASE
                 + builtin_interfaces.Time._hashRecursive(classes)
                 + foxglove_msgs.Point2._hashRecursive(classes)
                 + foxglove_msgs.Color._hashRecursive(classes)
                 + foxglove_msgs.Color._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            this.timestamp._encodeRecursive(outs); 
 
            this.position._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.text); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.font_size); 
 
            this.text_color._encodeRecursive(outs); 
 
            this.background_color._encodeRecursive(outs); 
 
        }
 
        public TextAnnotation(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public TextAnnotation(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.TextAnnotation _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.TextAnnotation o = new foxglove_msgs.TextAnnotation();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
            this.position = foxglove_msgs.Point2._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.text = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.font_size = ins.ReadDouble();
 
            this.text_color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
            this.background_color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
        }
 
        public foxglove_msgs.TextAnnotation Copy()
        {
            foxglove_msgs.TextAnnotation outobj = new foxglove_msgs.TextAnnotation();
            outobj.timestamp = this.timestamp.Copy();
 
            outobj.position = this.position.Copy();
 
            outobj.text = this.text;
 
            outobj.font_size = this.font_size;
 
            outobj.text_color = this.text_color.Copy();
 
            outobj.background_color = this.background_color.Copy();
 
            return outobj;
        }
    }
}

