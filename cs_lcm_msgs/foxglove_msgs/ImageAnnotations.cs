/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class ImageAnnotations : LCM.LCM.LCMEncodable
    {
        public int circles_length;
        public int points_length;
        public int texts_length;
        public foxglove_msgs.CircleAnnotation[] circles;
        public foxglove_msgs.PointsAnnotation[] points;
        public foxglove_msgs.TextAnnotation[] texts;
 
        public ImageAnnotations()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x8b3a52c632c59b07L;
 
        static ImageAnnotations()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.ImageAnnotations"))
                return 0L;
 
            classes.Add("foxglove_msgs.ImageAnnotations");
            ulong hash = LCM_FINGERPRINT_BASE
                 + foxglove_msgs.CircleAnnotation._hashRecursive(classes)
                 + foxglove_msgs.PointsAnnotation._hashRecursive(classes)
                 + foxglove_msgs.TextAnnotation._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.circles_length); 
 
            outs.Write(this.points_length); 
 
            outs.Write(this.texts_length); 
 
            for (int a = 0; a < this.circles_length; a++) {
                this.circles[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.points_length; a++) {
                this.points[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.texts_length; a++) {
                this.texts[a]._encodeRecursive(outs); 
            }
 
        }
 
        public ImageAnnotations(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public ImageAnnotations(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.ImageAnnotations _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.ImageAnnotations o = new foxglove_msgs.ImageAnnotations();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.circles_length = ins.ReadInt32();
 
            this.points_length = ins.ReadInt32();
 
            this.texts_length = ins.ReadInt32();
 
            this.circles = new foxglove_msgs.CircleAnnotation[(int) circles_length];
            for (int a = 0; a < this.circles_length; a++) {
                this.circles[a] = foxglove_msgs.CircleAnnotation._decodeRecursiveFactory(ins);
            }
 
            this.points = new foxglove_msgs.PointsAnnotation[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                this.points[a] = foxglove_msgs.PointsAnnotation._decodeRecursiveFactory(ins);
            }
 
            this.texts = new foxglove_msgs.TextAnnotation[(int) texts_length];
            for (int a = 0; a < this.texts_length; a++) {
                this.texts[a] = foxglove_msgs.TextAnnotation._decodeRecursiveFactory(ins);
            }
 
        }
 
        public foxglove_msgs.ImageAnnotations Copy()
        {
            foxglove_msgs.ImageAnnotations outobj = new foxglove_msgs.ImageAnnotations();
            outobj.circles_length = this.circles_length;
 
            outobj.points_length = this.points_length;
 
            outobj.texts_length = this.texts_length;
 
            outobj.circles = new foxglove_msgs.CircleAnnotation[(int) circles_length];
            for (int a = 0; a < this.circles_length; a++) {
                outobj.circles[a] = this.circles[a].Copy();
            }
 
            outobj.points = new foxglove_msgs.PointsAnnotation[(int) points_length];
            for (int a = 0; a < this.points_length; a++) {
                outobj.points[a] = this.points[a].Copy();
            }
 
            outobj.texts = new foxglove_msgs.TextAnnotation[(int) texts_length];
            for (int a = 0; a < this.texts_length; a++) {
                outobj.texts[a] = this.texts[a].Copy();
            }
 
            return outobj;
        }
    }
}

