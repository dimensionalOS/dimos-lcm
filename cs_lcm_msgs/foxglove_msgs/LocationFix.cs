/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class LocationFix : LCM.LCM.LCMEncodable
    {
        public builtin_interfaces.Time timestamp;
        public String frame_id;
        public double latitude;
        public double longitude;
        public double altitude;
        public double[] position_covariance;
        public byte position_covariance_type;
 
        public LocationFix()
        {
            position_covariance = new double[9];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xc7c172f7d2332f54L;
 
        public const int UNKNOWN = 0;
        public const int APPROXIMATED = 1;
        public const int DIAGONAL_KNOWN = 2;
        public const int KNOWN = 3;

        static LocationFix()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.LocationFix"))
                return 0L;
 
            classes.Add("foxglove_msgs.LocationFix");
            ulong hash = LCM_FINGERPRINT_BASE
                 + builtin_interfaces.Time._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            this.timestamp._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.frame_id); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.latitude); 
 
            outs.Write(this.longitude); 
 
            outs.Write(this.altitude); 
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.position_covariance[a]); 
            }
 
            outs.Write(this.position_covariance_type); 
 
        }
 
        public LocationFix(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public LocationFix(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.LocationFix _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.LocationFix o = new foxglove_msgs.LocationFix();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.frame_id = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.latitude = ins.ReadDouble();
 
            this.longitude = ins.ReadDouble();
 
            this.altitude = ins.ReadDouble();
 
            this.position_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.position_covariance[a] = ins.ReadDouble();
            }
 
            this.position_covariance_type = ins.ReadByte();
 
        }
 
        public foxglove_msgs.LocationFix Copy()
        {
            foxglove_msgs.LocationFix outobj = new foxglove_msgs.LocationFix();
            outobj.timestamp = this.timestamp.Copy();
 
            outobj.frame_id = this.frame_id;
 
            outobj.latitude = this.latitude;
 
            outobj.longitude = this.longitude;
 
            outobj.altitude = this.altitude;
 
            outobj.position_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.position_covariance[a] = this.position_covariance[a];
            }
 
            outobj.position_covariance_type = this.position_covariance_type;
 
            return outobj;
        }
    }
}

