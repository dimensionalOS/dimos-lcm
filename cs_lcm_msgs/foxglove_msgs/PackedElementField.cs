/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class PackedElementField : LCM.LCM.LCMEncodable
    {
        public String name;
        public int offset;
        public byte type;
 
        public PackedElementField()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x47c85ba0fafa16b8L;
 
        public const int UNKNOWN = 0;
        public const int UINT8 = 1;
        public const int INT8 = 2;
        public const int UINT16 = 3;
        public const int INT16 = 4;
        public const int UINT32 = 5;
        public const int INT32 = 6;
        public const int FLOAT32 = 7;
        public const int FLOAT64 = 8;

        static PackedElementField()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.PackedElementField"))
                return 0L;
 
            classes.Add("foxglove_msgs.PackedElementField");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.offset); 
 
            outs.Write(this.type); 
 
        }
 
        public PackedElementField(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public PackedElementField(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.PackedElementField _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.PackedElementField o = new foxglove_msgs.PackedElementField();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.offset = ins.ReadInt32();
 
            this.type = ins.ReadByte();
 
        }
 
        public foxglove_msgs.PackedElementField Copy()
        {
            foxglove_msgs.PackedElementField outobj = new foxglove_msgs.PackedElementField();
            outobj.name = this.name;
 
            outobj.offset = this.offset;
 
            outobj.type = this.type;
 
            return outobj;
        }
    }
}

