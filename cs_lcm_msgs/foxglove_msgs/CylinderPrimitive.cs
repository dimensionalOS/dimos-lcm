/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace foxglove_msgs
{
    public sealed class CylinderPrimitive : LCM.LCM.LCMEncodable
    {
        public geometry_msgs.Pose pose;
        public geometry_msgs.Vector3 size;
        public double bottom_scale;
        public double top_scale;
        public foxglove_msgs.Color color;
 
        public CylinderPrimitive()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xa52103034bfe0bacL;
 
        static CylinderPrimitive()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("foxglove_msgs.CylinderPrimitive"))
                return 0L;
 
            classes.Add("foxglove_msgs.CylinderPrimitive");
            ulong hash = LCM_FINGERPRINT_BASE
                 + geometry_msgs.Pose._hashRecursive(classes)
                 + geometry_msgs.Vector3._hashRecursive(classes)
                 + foxglove_msgs.Color._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.pose._encodeRecursive(outs); 
 
            this.size._encodeRecursive(outs); 
 
            outs.Write(this.bottom_scale); 
 
            outs.Write(this.top_scale); 
 
            this.color._encodeRecursive(outs); 
 
        }
 
        public CylinderPrimitive(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public CylinderPrimitive(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static foxglove_msgs.CylinderPrimitive _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            foxglove_msgs.CylinderPrimitive o = new foxglove_msgs.CylinderPrimitive();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
            this.size = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
            this.bottom_scale = ins.ReadDouble();
 
            this.top_scale = ins.ReadDouble();
 
            this.color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
        }
 
        public foxglove_msgs.CylinderPrimitive Copy()
        {
            foxglove_msgs.CylinderPrimitive outobj = new foxglove_msgs.CylinderPrimitive();
            outobj.pose = this.pose.Copy();
 
            outobj.size = this.size.Copy();
 
            outobj.bottom_scale = this.bottom_scale;
 
            outobj.top_scale = this.top_scale;
 
            outobj.color = this.color.Copy();
 
            return outobj;
        }
    }
}

