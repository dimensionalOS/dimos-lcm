/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace stereo_msgs
{
    public sealed class DisparityImage : LCM.LCM.LCMEncodable
    {
        public std_msgs.Header header;
        public sensor_msgs.Image image;
        public float f;
        public float T;
        public sensor_msgs.RegionOfInterest valid_window;
        public float min_disparity;
        public float max_disparity;
        public float delta_d;
 
        public DisparityImage()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xdeb7a557a2b9258aL;
 
        static DisparityImage()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("stereo_msgs.DisparityImage"))
                return 0L;
 
            classes.Add("stereo_msgs.DisparityImage");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + sensor_msgs.Image._hashRecursive(classes)
                 + sensor_msgs.RegionOfInterest._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            this.image._encodeRecursive(outs); 
 
            outs.Write(this.f); 
 
            outs.Write(this.T); 
 
            this.valid_window._encodeRecursive(outs); 
 
            outs.Write(this.min_disparity); 
 
            outs.Write(this.max_disparity); 
 
            outs.Write(this.delta_d); 
 
        }
 
        public DisparityImage(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public DisparityImage(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static stereo_msgs.DisparityImage _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            stereo_msgs.DisparityImage o = new stereo_msgs.DisparityImage();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.image = sensor_msgs.Image._decodeRecursiveFactory(ins);
 
            this.f = ins.ReadSingle();
 
            this.T = ins.ReadSingle();
 
            this.valid_window = sensor_msgs.RegionOfInterest._decodeRecursiveFactory(ins);
 
            this.min_disparity = ins.ReadSingle();
 
            this.max_disparity = ins.ReadSingle();
 
            this.delta_d = ins.ReadSingle();
 
        }
 
        public stereo_msgs.DisparityImage Copy()
        {
            stereo_msgs.DisparityImage outobj = new stereo_msgs.DisparityImage();
            outobj.header = this.header.Copy();
 
            outobj.image = this.image.Copy();
 
            outobj.f = this.f;
 
            outobj.T = this.T;
 
            outobj.valid_window = this.valid_window.Copy();
 
            outobj.min_disparity = this.min_disparity;
 
            outobj.max_disparity = this.max_disparity;
 
            outobj.delta_d = this.delta_d;
 
            return outobj;
        }
    }
}

