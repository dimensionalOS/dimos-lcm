/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class TimeReference : LCM.LCM.LCMEncodable
    {
        public std_msgs.Header header;
        public std_msgs.Time time_ref;
        public String source;
 
        public TimeReference()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x1a6b1c8c5abae6dbL;
 
        static TimeReference()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.TimeReference"))
                return 0L;
 
            classes.Add("sensor_msgs.TimeReference");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + std_msgs.Time._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            this.header._encodeRecursive(outs); 
 
            this.time_ref._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.source); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
        }
 
        public TimeReference(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public TimeReference(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.TimeReference _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.TimeReference o = new sensor_msgs.TimeReference();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.time_ref = std_msgs.Time._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.source = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
        }
 
        public sensor_msgs.TimeReference Copy()
        {
            sensor_msgs.TimeReference outobj = new sensor_msgs.TimeReference();
            outobj.header = this.header.Copy();
 
            outobj.time_ref = this.time_ref.Copy();
 
            outobj.source = this.source;
 
            return outobj;
        }
    }
}

