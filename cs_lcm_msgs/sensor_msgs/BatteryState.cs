/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class BatteryState : LCM.LCM.LCMEncodable
    {
        public int cell_voltage_length;
        public int cell_temperature_length;
        public std_msgs.Header header;
        public float voltage;
        public float temperature;
        public float current;
        public float charge;
        public float capacity;
        public float design_capacity;
        public float percentage;
        public byte power_supply_status;
        public byte power_supply_health;
        public byte power_supply_technology;
        public bool present;
        public float[] cell_voltage;
        public float[] cell_temperature;
        public String location;
        public String serial_number;
 
        public BatteryState()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x8f419fb94c3b774dL;
 
        public const int POWER_SUPPLY_STATUS_UNKNOWN = 0;
        public const int POWER_SUPPLY_STATUS_CHARGING = 1;
        public const int POWER_SUPPLY_STATUS_DISCHARGING = 2;
        public const int POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
        public const int POWER_SUPPLY_STATUS_FULL = 4;
        public const int POWER_SUPPLY_HEALTH_UNKNOWN = 0;
        public const int POWER_SUPPLY_HEALTH_GOOD = 1;
        public const int POWER_SUPPLY_HEALTH_OVERHEAT = 2;
        public const int POWER_SUPPLY_HEALTH_DEAD = 3;
        public const int POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4;
        public const int POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5;
        public const int POWER_SUPPLY_HEALTH_COLD = 6;
        public const int POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7;
        public const int POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8;
        public const int POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0;
        public const int POWER_SUPPLY_TECHNOLOGY_NIMH = 1;
        public const int POWER_SUPPLY_TECHNOLOGY_LION = 2;
        public const int POWER_SUPPLY_TECHNOLOGY_LIPO = 3;
        public const int POWER_SUPPLY_TECHNOLOGY_LIFE = 4;
        public const int POWER_SUPPLY_TECHNOLOGY_NICD = 5;
        public const int POWER_SUPPLY_TECHNOLOGY_LIMN = 6;

        static BatteryState()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.BatteryState"))
                return 0L;
 
            classes.Add("sensor_msgs.BatteryState");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.cell_voltage_length); 
 
            outs.Write(this.cell_temperature_length); 
 
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.voltage); 
 
            outs.Write(this.temperature); 
 
            outs.Write(this.current); 
 
            outs.Write(this.charge); 
 
            outs.Write(this.capacity); 
 
            outs.Write(this.design_capacity); 
 
            outs.Write(this.percentage); 
 
            outs.Write(this.power_supply_status); 
 
            outs.Write(this.power_supply_health); 
 
            outs.Write(this.power_supply_technology); 
 
            outs.Write(this.present); 
 
            for (int a = 0; a < this.cell_voltage_length; a++) {
                outs.Write(this.cell_voltage[a]); 
            }
 
            for (int a = 0; a < this.cell_temperature_length; a++) {
                outs.Write(this.cell_temperature[a]); 
            }
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.location); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.serial_number); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
        }
 
        public BatteryState(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public BatteryState(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.BatteryState _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.BatteryState o = new sensor_msgs.BatteryState();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.cell_voltage_length = ins.ReadInt32();
 
            this.cell_temperature_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.voltage = ins.ReadSingle();
 
            this.temperature = ins.ReadSingle();
 
            this.current = ins.ReadSingle();
 
            this.charge = ins.ReadSingle();
 
            this.capacity = ins.ReadSingle();
 
            this.design_capacity = ins.ReadSingle();
 
            this.percentage = ins.ReadSingle();
 
            this.power_supply_status = ins.ReadByte();
 
            this.power_supply_health = ins.ReadByte();
 
            this.power_supply_technology = ins.ReadByte();
 
            this.present = ins.ReadBoolean();
 
            this.cell_voltage = new float[(int) cell_voltage_length];
            for (int a = 0; a < this.cell_voltage_length; a++) {
                this.cell_voltage[a] = ins.ReadSingle();
            }
 
            this.cell_temperature = new float[(int) cell_temperature_length];
            for (int a = 0; a < this.cell_temperature_length; a++) {
                this.cell_temperature[a] = ins.ReadSingle();
            }
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.location = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.serial_number = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
        }
 
        public sensor_msgs.BatteryState Copy()
        {
            sensor_msgs.BatteryState outobj = new sensor_msgs.BatteryState();
            outobj.cell_voltage_length = this.cell_voltage_length;
 
            outobj.cell_temperature_length = this.cell_temperature_length;
 
            outobj.header = this.header.Copy();
 
            outobj.voltage = this.voltage;
 
            outobj.temperature = this.temperature;
 
            outobj.current = this.current;
 
            outobj.charge = this.charge;
 
            outobj.capacity = this.capacity;
 
            outobj.design_capacity = this.design_capacity;
 
            outobj.percentage = this.percentage;
 
            outobj.power_supply_status = this.power_supply_status;
 
            outobj.power_supply_health = this.power_supply_health;
 
            outobj.power_supply_technology = this.power_supply_technology;
 
            outobj.present = this.present;
 
            outobj.cell_voltage = new float[(int) cell_voltage_length];
            for (int a = 0; a < this.cell_voltage_length; a++) {
                outobj.cell_voltage[a] = this.cell_voltage[a];
            }
 
            outobj.cell_temperature = new float[(int) cell_temperature_length];
            for (int a = 0; a < this.cell_temperature_length; a++) {
                outobj.cell_temperature[a] = this.cell_temperature[a];
            }
 
            outobj.location = this.location;
 
            outobj.serial_number = this.serial_number;
 
            return outobj;
        }
    }
}

