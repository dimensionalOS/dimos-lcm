/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class Range : LCM.LCM.LCMEncodable
    {
        public std_msgs.Header header;
        public byte radiation_type;
        public float field_of_view;
        public float min_range;
        public float max_range;
        public float range;
 
        public Range()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xaaf9249a1465f86aL;
 
        public const int ULTRASOUND = 0;
        public const int INFRARED = 1;

        static Range()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.Range"))
                return 0L;
 
            classes.Add("sensor_msgs.Range");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.radiation_type); 
 
            outs.Write(this.field_of_view); 
 
            outs.Write(this.min_range); 
 
            outs.Write(this.max_range); 
 
            outs.Write(this.range); 
 
        }
 
        public Range(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Range(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.Range _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.Range o = new sensor_msgs.Range();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.radiation_type = ins.ReadByte();
 
            this.field_of_view = ins.ReadSingle();
 
            this.min_range = ins.ReadSingle();
 
            this.max_range = ins.ReadSingle();
 
            this.range = ins.ReadSingle();
 
        }
 
        public sensor_msgs.Range Copy()
        {
            sensor_msgs.Range outobj = new sensor_msgs.Range();
            outobj.header = this.header.Copy();
 
            outobj.radiation_type = this.radiation_type;
 
            outobj.field_of_view = this.field_of_view;
 
            outobj.min_range = this.min_range;
 
            outobj.max_range = this.max_range;
 
            outobj.range = this.range;
 
            return outobj;
        }
    }
}

