/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class MultiEchoLaserScan : LCM.LCM.LCMEncodable
    {
        public int ranges_length;
        public int intensities_length;
        public std_msgs.Header header;
        public float angle_min;
        public float angle_max;
        public float angle_increment;
        public float time_increment;
        public float scan_time;
        public float range_min;
        public float range_max;
        public sensor_msgs.LaserEcho[] ranges;
        public sensor_msgs.LaserEcho[] intensities;
 
        public MultiEchoLaserScan()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xf02a6253849d18e2L;
 
        static MultiEchoLaserScan()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.MultiEchoLaserScan"))
                return 0L;
 
            classes.Add("sensor_msgs.MultiEchoLaserScan");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + sensor_msgs.LaserEcho._hashRecursive(classes)
                 + sensor_msgs.LaserEcho._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.ranges_length); 
 
            outs.Write(this.intensities_length); 
 
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.angle_min); 
 
            outs.Write(this.angle_max); 
 
            outs.Write(this.angle_increment); 
 
            outs.Write(this.time_increment); 
 
            outs.Write(this.scan_time); 
 
            outs.Write(this.range_min); 
 
            outs.Write(this.range_max); 
 
            for (int a = 0; a < this.ranges_length; a++) {
                this.ranges[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.intensities_length; a++) {
                this.intensities[a]._encodeRecursive(outs); 
            }
 
        }
 
        public MultiEchoLaserScan(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public MultiEchoLaserScan(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.MultiEchoLaserScan _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.MultiEchoLaserScan o = new sensor_msgs.MultiEchoLaserScan();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.ranges_length = ins.ReadInt32();
 
            this.intensities_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.angle_min = ins.ReadSingle();
 
            this.angle_max = ins.ReadSingle();
 
            this.angle_increment = ins.ReadSingle();
 
            this.time_increment = ins.ReadSingle();
 
            this.scan_time = ins.ReadSingle();
 
            this.range_min = ins.ReadSingle();
 
            this.range_max = ins.ReadSingle();
 
            this.ranges = new sensor_msgs.LaserEcho[(int) ranges_length];
            for (int a = 0; a < this.ranges_length; a++) {
                this.ranges[a] = sensor_msgs.LaserEcho._decodeRecursiveFactory(ins);
            }
 
            this.intensities = new sensor_msgs.LaserEcho[(int) intensities_length];
            for (int a = 0; a < this.intensities_length; a++) {
                this.intensities[a] = sensor_msgs.LaserEcho._decodeRecursiveFactory(ins);
            }
 
        }
 
        public sensor_msgs.MultiEchoLaserScan Copy()
        {
            sensor_msgs.MultiEchoLaserScan outobj = new sensor_msgs.MultiEchoLaserScan();
            outobj.ranges_length = this.ranges_length;
 
            outobj.intensities_length = this.intensities_length;
 
            outobj.header = this.header.Copy();
 
            outobj.angle_min = this.angle_min;
 
            outobj.angle_max = this.angle_max;
 
            outobj.angle_increment = this.angle_increment;
 
            outobj.time_increment = this.time_increment;
 
            outobj.scan_time = this.scan_time;
 
            outobj.range_min = this.range_min;
 
            outobj.range_max = this.range_max;
 
            outobj.ranges = new sensor_msgs.LaserEcho[(int) ranges_length];
            for (int a = 0; a < this.ranges_length; a++) {
                outobj.ranges[a] = this.ranges[a].Copy();
            }
 
            outobj.intensities = new sensor_msgs.LaserEcho[(int) intensities_length];
            for (int a = 0; a < this.intensities_length; a++) {
                outobj.intensities[a] = this.intensities[a].Copy();
            }
 
            return outobj;
        }
    }
}

