/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class LaserEcho : LCM.LCM.LCMEncodable
    {
        public int echoes_length;
        public float[] echoes;
 
        public LaserEcho()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xc45702116c7d0a2eL;
 
        static LaserEcho()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.LaserEcho"))
                return 0L;
 
            classes.Add("sensor_msgs.LaserEcho");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.echoes_length); 
 
            for (int a = 0; a < this.echoes_length; a++) {
                outs.Write(this.echoes[a]); 
            }
 
        }
 
        public LaserEcho(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public LaserEcho(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.LaserEcho _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.LaserEcho o = new sensor_msgs.LaserEcho();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.echoes_length = ins.ReadInt32();
 
            this.echoes = new float[(int) echoes_length];
            for (int a = 0; a < this.echoes_length; a++) {
                this.echoes[a] = ins.ReadSingle();
            }
 
        }
 
        public sensor_msgs.LaserEcho Copy()
        {
            sensor_msgs.LaserEcho outobj = new sensor_msgs.LaserEcho();
            outobj.echoes_length = this.echoes_length;
 
            outobj.echoes = new float[(int) echoes_length];
            for (int a = 0; a < this.echoes_length; a++) {
                outobj.echoes[a] = this.echoes[a];
            }
 
            return outobj;
        }
    }
}

