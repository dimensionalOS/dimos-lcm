/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class CompressedImage : LCM.LCM.LCMEncodable
    {
        public int data_length;
        public std_msgs.Header header;
        public String format;
        public byte[] data;
 
        public CompressedImage()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xac8cf79b462311d9L;
 
        static CompressedImage()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.CompressedImage"))
                return 0L;
 
            classes.Add("sensor_msgs.CompressedImage");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.data_length); 
 
            this.header._encodeRecursive(outs); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.format); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            for (int a = 0; a < this.data_length; a++) {
                outs.Write(this.data[a]); 
            }
 
        }
 
        public CompressedImage(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public CompressedImage(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.CompressedImage _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.CompressedImage o = new sensor_msgs.CompressedImage();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.data_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.format = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.data = new byte[(int) data_length];
            for (int a = 0; a < this.data_length; a++) {
                this.data[a] = ins.ReadByte();
            }
 
        }
 
        public sensor_msgs.CompressedImage Copy()
        {
            sensor_msgs.CompressedImage outobj = new sensor_msgs.CompressedImage();
            outobj.data_length = this.data_length;
 
            outobj.header = this.header.Copy();
 
            outobj.format = this.format;
 
            outobj.data = new byte[(int) data_length];
            for (int a = 0; a < this.data_length; a++) {
                outobj.data[a] = this.data[a];
            }
 
            return outobj;
        }
    }
}

