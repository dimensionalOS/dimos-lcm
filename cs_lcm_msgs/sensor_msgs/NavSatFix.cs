/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class NavSatFix : LCM.LCM.LCMEncodable
    {
        public std_msgs.Header header;
        public sensor_msgs.NavSatStatus status;
        public double latitude;
        public double longitude;
        public double altitude;
        public double[] position_covariance;
        public byte position_covariance_type;
 
        public NavSatFix()
        {
            position_covariance = new double[9];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x4a84d20526d9067aL;
 
        public const int COVARIANCE_TYPE_UNKNOWN = 0;
        public const int COVARIANCE_TYPE_APPROXIMATED = 1;
        public const int COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
        public const int COVARIANCE_TYPE_KNOWN = 3;

        static NavSatFix()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.NavSatFix"))
                return 0L;
 
            classes.Add("sensor_msgs.NavSatFix");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + sensor_msgs.NavSatStatus._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            this.status._encodeRecursive(outs); 
 
            outs.Write(this.latitude); 
 
            outs.Write(this.longitude); 
 
            outs.Write(this.altitude); 
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.position_covariance[a]); 
            }
 
            outs.Write(this.position_covariance_type); 
 
        }
 
        public NavSatFix(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public NavSatFix(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.NavSatFix _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.NavSatFix o = new sensor_msgs.NavSatFix();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.status = sensor_msgs.NavSatStatus._decodeRecursiveFactory(ins);
 
            this.latitude = ins.ReadDouble();
 
            this.longitude = ins.ReadDouble();
 
            this.altitude = ins.ReadDouble();
 
            this.position_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.position_covariance[a] = ins.ReadDouble();
            }
 
            this.position_covariance_type = ins.ReadByte();
 
        }
 
        public sensor_msgs.NavSatFix Copy()
        {
            sensor_msgs.NavSatFix outobj = new sensor_msgs.NavSatFix();
            outobj.header = this.header.Copy();
 
            outobj.status = this.status.Copy();
 
            outobj.latitude = this.latitude;
 
            outobj.longitude = this.longitude;
 
            outobj.altitude = this.altitude;
 
            outobj.position_covariance = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.position_covariance[a] = this.position_covariance[a];
            }
 
            outobj.position_covariance_type = this.position_covariance_type;
 
            return outobj;
        }
    }
}

