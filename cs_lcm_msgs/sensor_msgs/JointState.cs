/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class JointState : LCM.LCM.LCMEncodable
    {
        public int name_length;
        public int position_length;
        public int velocity_length;
        public int effort_length;
        public std_msgs.Header header;
        public String[] name;
        public double[] position;
        public double[] velocity;
        public double[] effort;
 
        public JointState()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xb69cc30d0d7668faL;
 
        static JointState()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.JointState"))
                return 0L;
 
            classes.Add("sensor_msgs.JointState");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.name_length); 
 
            outs.Write(this.position_length); 
 
            outs.Write(this.velocity_length); 
 
            outs.Write(this.effort_length); 
 
            this.header._encodeRecursive(outs); 
 
            for (int a = 0; a < this.name_length; a++) {
                __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.name[a]); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
            }
 
            for (int a = 0; a < this.position_length; a++) {
                outs.Write(this.position[a]); 
            }
 
            for (int a = 0; a < this.velocity_length; a++) {
                outs.Write(this.velocity[a]); 
            }
 
            for (int a = 0; a < this.effort_length; a++) {
                outs.Write(this.effort[a]); 
            }
 
        }
 
        public JointState(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public JointState(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.JointState _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.JointState o = new sensor_msgs.JointState();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.name_length = ins.ReadInt32();
 
            this.position_length = ins.ReadInt32();
 
            this.velocity_length = ins.ReadInt32();
 
            this.effort_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.name = new String[(int) name_length];
            for (int a = 0; a < this.name_length; a++) {
                __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.name[a] = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
            }
 
            this.position = new double[(int) position_length];
            for (int a = 0; a < this.position_length; a++) {
                this.position[a] = ins.ReadDouble();
            }
 
            this.velocity = new double[(int) velocity_length];
            for (int a = 0; a < this.velocity_length; a++) {
                this.velocity[a] = ins.ReadDouble();
            }
 
            this.effort = new double[(int) effort_length];
            for (int a = 0; a < this.effort_length; a++) {
                this.effort[a] = ins.ReadDouble();
            }
 
        }
 
        public sensor_msgs.JointState Copy()
        {
            sensor_msgs.JointState outobj = new sensor_msgs.JointState();
            outobj.name_length = this.name_length;
 
            outobj.position_length = this.position_length;
 
            outobj.velocity_length = this.velocity_length;
 
            outobj.effort_length = this.effort_length;
 
            outobj.header = this.header.Copy();
 
            outobj.name = new String[(int) name_length];
            for (int a = 0; a < this.name_length; a++) {
                outobj.name[a] = this.name[a];
            }
 
            outobj.position = new double[(int) position_length];
            for (int a = 0; a < this.position_length; a++) {
                outobj.position[a] = this.position[a];
            }
 
            outobj.velocity = new double[(int) velocity_length];
            for (int a = 0; a < this.velocity_length; a++) {
                outobj.velocity[a] = this.velocity[a];
            }
 
            outobj.effort = new double[(int) effort_length];
            for (int a = 0; a < this.effort_length; a++) {
                outobj.effort[a] = this.effort[a];
            }
 
            return outobj;
        }
    }
}

