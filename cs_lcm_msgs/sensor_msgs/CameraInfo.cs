/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class CameraInfo : LCM.LCM.LCMEncodable
    {
        public int D_length;
        public std_msgs.Header header;
        public int height;
        public int width;
        public String distortion_model;
        public double[] D;
        public double[] K;
        public double[] R;
        public double[] P;
        public int binning_x;
        public int binning_y;
        public sensor_msgs.RegionOfInterest roi;
 
        public CameraInfo()
        {
            K = new double[9];
            R = new double[9];
            P = new double[12];
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xb4ea6258bc6d0702L;
 
        static CameraInfo()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.CameraInfo"))
                return 0L;
 
            classes.Add("sensor_msgs.CameraInfo");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + sensor_msgs.RegionOfInterest._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.D_length); 
 
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.height); 
 
            outs.Write(this.width); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.distortion_model); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            for (int a = 0; a < this.D_length; a++) {
                outs.Write(this.D[a]); 
            }
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.K[a]); 
            }
 
            for (int a = 0; a < 9; a++) {
                outs.Write(this.R[a]); 
            }
 
            for (int a = 0; a < 12; a++) {
                outs.Write(this.P[a]); 
            }
 
            outs.Write(this.binning_x); 
 
            outs.Write(this.binning_y); 
 
            this.roi._encodeRecursive(outs); 
 
        }
 
        public CameraInfo(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public CameraInfo(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.CameraInfo _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.CameraInfo o = new sensor_msgs.CameraInfo();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.D_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.height = ins.ReadInt32();
 
            this.width = ins.ReadInt32();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.distortion_model = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.D = new double[(int) D_length];
            for (int a = 0; a < this.D_length; a++) {
                this.D[a] = ins.ReadDouble();
            }
 
            this.K = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.K[a] = ins.ReadDouble();
            }
 
            this.R = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                this.R[a] = ins.ReadDouble();
            }
 
            this.P = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                this.P[a] = ins.ReadDouble();
            }
 
            this.binning_x = ins.ReadInt32();
 
            this.binning_y = ins.ReadInt32();
 
            this.roi = sensor_msgs.RegionOfInterest._decodeRecursiveFactory(ins);
 
        }
 
        public sensor_msgs.CameraInfo Copy()
        {
            sensor_msgs.CameraInfo outobj = new sensor_msgs.CameraInfo();
            outobj.D_length = this.D_length;
 
            outobj.header = this.header.Copy();
 
            outobj.height = this.height;
 
            outobj.width = this.width;
 
            outobj.distortion_model = this.distortion_model;
 
            outobj.D = new double[(int) D_length];
            for (int a = 0; a < this.D_length; a++) {
                outobj.D[a] = this.D[a];
            }
 
            outobj.K = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.K[a] = this.K[a];
            }
 
            outobj.R = new double[(int) 9];
            for (int a = 0; a < 9; a++) {
                outobj.R[a] = this.R[a];
            }
 
            outobj.P = new double[(int) 12];
            for (int a = 0; a < 12; a++) {
                outobj.P[a] = this.P[a];
            }
 
            outobj.binning_x = this.binning_x;
 
            outobj.binning_y = this.binning_y;
 
            outobj.roi = this.roi.Copy();
 
            return outobj;
        }
    }
}

