/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class MultiDOFJointState : LCM.LCM.LCMEncodable
    {
        public int joint_names_length;
        public int transforms_length;
        public int twist_length;
        public int wrench_length;
        public std_msgs.Header header;
        public String[] joint_names;
        public geometry_msgs.Transform[] transforms;
        public geometry_msgs.Twist[] twist;
        public geometry_msgs.Wrench[] wrench;
 
        public MultiDOFJointState()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x15ca331f6f9f4fbcL;
 
        static MultiDOFJointState()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.MultiDOFJointState"))
                return 0L;
 
            classes.Add("sensor_msgs.MultiDOFJointState");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Transform._hashRecursive(classes)
                 + geometry_msgs.Twist._hashRecursive(classes)
                 + geometry_msgs.Wrench._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.joint_names_length); 
 
            outs.Write(this.transforms_length); 
 
            outs.Write(this.twist_length); 
 
            outs.Write(this.wrench_length); 
 
            this.header._encodeRecursive(outs); 
 
            for (int a = 0; a < this.joint_names_length; a++) {
                __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.joint_names[a]); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
            }
 
            for (int a = 0; a < this.transforms_length; a++) {
                this.transforms[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.twist_length; a++) {
                this.twist[a]._encodeRecursive(outs); 
            }
 
            for (int a = 0; a < this.wrench_length; a++) {
                this.wrench[a]._encodeRecursive(outs); 
            }
 
        }
 
        public MultiDOFJointState(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public MultiDOFJointState(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.MultiDOFJointState _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.MultiDOFJointState o = new sensor_msgs.MultiDOFJointState();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.joint_names_length = ins.ReadInt32();
 
            this.transforms_length = ins.ReadInt32();
 
            this.twist_length = ins.ReadInt32();
 
            this.wrench_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.joint_names = new String[(int) joint_names_length];
            for (int a = 0; a < this.joint_names_length; a++) {
                __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.joint_names[a] = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
            }
 
            this.transforms = new geometry_msgs.Transform[(int) transforms_length];
            for (int a = 0; a < this.transforms_length; a++) {
                this.transforms[a] = geometry_msgs.Transform._decodeRecursiveFactory(ins);
            }
 
            this.twist = new geometry_msgs.Twist[(int) twist_length];
            for (int a = 0; a < this.twist_length; a++) {
                this.twist[a] = geometry_msgs.Twist._decodeRecursiveFactory(ins);
            }
 
            this.wrench = new geometry_msgs.Wrench[(int) wrench_length];
            for (int a = 0; a < this.wrench_length; a++) {
                this.wrench[a] = geometry_msgs.Wrench._decodeRecursiveFactory(ins);
            }
 
        }
 
        public sensor_msgs.MultiDOFJointState Copy()
        {
            sensor_msgs.MultiDOFJointState outobj = new sensor_msgs.MultiDOFJointState();
            outobj.joint_names_length = this.joint_names_length;
 
            outobj.transforms_length = this.transforms_length;
 
            outobj.twist_length = this.twist_length;
 
            outobj.wrench_length = this.wrench_length;
 
            outobj.header = this.header.Copy();
 
            outobj.joint_names = new String[(int) joint_names_length];
            for (int a = 0; a < this.joint_names_length; a++) {
                outobj.joint_names[a] = this.joint_names[a];
            }
 
            outobj.transforms = new geometry_msgs.Transform[(int) transforms_length];
            for (int a = 0; a < this.transforms_length; a++) {
                outobj.transforms[a] = this.transforms[a].Copy();
            }
 
            outobj.twist = new geometry_msgs.Twist[(int) twist_length];
            for (int a = 0; a < this.twist_length; a++) {
                outobj.twist[a] = this.twist[a].Copy();
            }
 
            outobj.wrench = new geometry_msgs.Wrench[(int) wrench_length];
            for (int a = 0; a < this.wrench_length; a++) {
                outobj.wrench[a] = this.wrench[a].Copy();
            }
 
            return outobj;
        }
    }
}

