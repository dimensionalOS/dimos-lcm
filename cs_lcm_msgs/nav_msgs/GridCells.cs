/* LCM type definition class file
 * This file was automatically generated by lcm-gen 1.5.1
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace nav_msgs
{
    public sealed class GridCells : LCM.LCM.LCMEncodable
    {
        public int cells_length;
        public std_msgs.Header header;
        public float cell_width;
        public float cell_height;
        public geometry_msgs.Point[] cells;
 
        public GridCells()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xb855326533062750L;
 
        static GridCells()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("nav_msgs.GridCells"))
                return 0L;
 
            classes.Add("nav_msgs.GridCells");
            ulong hash = LCM_FINGERPRINT_BASE
                 + std_msgs.Header._hashRecursive(classes)
                 + geometry_msgs.Point._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.cells_length); 
 
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.cell_width); 
 
            outs.Write(this.cell_height); 
 
            for (int a = 0; a < this.cells_length; a++) {
                this.cells[a]._encodeRecursive(outs); 
            }
 
        }
 
        public GridCells(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public GridCells(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static nav_msgs.GridCells _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            nav_msgs.GridCells o = new nav_msgs.GridCells();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.cells_length = ins.ReadInt32();
 
            this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
            this.cell_width = ins.ReadSingle();
 
            this.cell_height = ins.ReadSingle();
 
            this.cells = new geometry_msgs.Point[(int) cells_length];
            for (int a = 0; a < this.cells_length; a++) {
                this.cells[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
            }
 
        }
 
        public nav_msgs.GridCells Copy()
        {
            nav_msgs.GridCells outobj = new nav_msgs.GridCells();
            outobj.cells_length = this.cells_length;
 
            outobj.header = this.header.Copy();
 
            outobj.cell_width = this.cell_width;
 
            outobj.cell_height = this.cell_height;
 
            outobj.cells = new geometry_msgs.Point[(int) cells_length];
            for (int a = 0; a < this.cells_length; a++) {
                outobj.cells[a] = this.cells[a].Copy();
            }
 
            return outobj;
        }
    }
}

