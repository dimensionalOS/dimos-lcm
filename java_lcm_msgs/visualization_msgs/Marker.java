/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package visualization_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Marker implements lcm.lcm.LCMEncodable
{
    public int points_length;

    public int colors_length;

    public std_msgs.Header header;

    public String ns;

    public int id;

    public int type;

    public int action;

    public geometry_msgs.Pose pose;

    public geometry_msgs.Vector3 scale;

    public std_msgs.ColorRGBA color;

    public std_msgs.Duration lifetime;

    public boolean frame_locked;

    /**
     * LCM Type: geometry_msgs.Point[points_length]
     */
    public geometry_msgs.Point points[];

    /**
     * LCM Type: std_msgs.ColorRGBA[colors_length]
     */
    public std_msgs.ColorRGBA colors[];

    public String text;

    public String mesh_resource;

    public boolean mesh_use_embedded_materials;

 
    public Marker()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x707e24d8bc038bd3L;
 
    public static final byte ARROW = (byte) 0;
    public static final byte CUBE = (byte) 1;
    public static final byte SPHERE = (byte) 2;
    public static final byte CYLINDER = (byte) 3;
    public static final byte LINE_STRIP = (byte) 4;
    public static final byte LINE_LIST = (byte) 5;
    public static final byte CUBE_LIST = (byte) 6;
    public static final byte SPHERE_LIST = (byte) 7;
    public static final byte POINTS = (byte) 8;
    public static final byte TEXT_VIEW_FACING = (byte) 9;
    public static final byte MESH_RESOURCE = (byte) 10;
    public static final byte TRIANGLE_LIST = (byte) 11;
    public static final byte ADD = (byte) 0;
    public static final byte MODIFY = (byte) 0;
    public static final byte DELETE = (byte) 2;
    public static final byte DELETEALL = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(visualization_msgs.Marker.class))
            return 0L;
 
        classes.add(visualization_msgs.Marker.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Pose._hashRecursive(classes)
             + geometry_msgs.Vector3._hashRecursive(classes)
             + std_msgs.ColorRGBA._hashRecursive(classes)
             + std_msgs.Duration._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
             + std_msgs.ColorRGBA._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.points_length); 
 
        outs.writeInt(this.colors_length); 
 
        this.header._encodeRecursive(outs); 
 
        __strbuf = new char[this.ns.length()]; this.ns.getChars(0, this.ns.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.id); 
 
        outs.writeInt(this.type); 
 
        outs.writeInt(this.action); 
 
        this.pose._encodeRecursive(outs); 
 
        this.scale._encodeRecursive(outs); 
 
        this.color._encodeRecursive(outs); 
 
        this.lifetime._encodeRecursive(outs); 
 
        outs.writeByte( this.frame_locked ? 1 : 0); 
 
        for (int a = 0; a < this.points_length; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.colors_length; a++) {
            this.colors[a]._encodeRecursive(outs); 
        }
 
        __strbuf = new char[this.text.length()]; this.text.getChars(0, this.text.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.mesh_resource.length()]; this.mesh_resource.getChars(0, this.mesh_resource.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.mesh_use_embedded_materials ? 1 : 0); 
 
    }
 
    public Marker(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Marker(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static visualization_msgs.Marker _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        visualization_msgs.Marker o = new visualization_msgs.Marker();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.points_length = ins.readInt();
 
        this.colors_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.ns = new String(__strbuf);
 
        this.id = ins.readInt();
 
        this.type = ins.readInt();
 
        this.action = ins.readInt();
 
        this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
        this.scale = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
        this.color = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
 
        this.lifetime = std_msgs.Duration._decodeRecursiveFactory(ins);
 
        this.frame_locked = ins.readByte()!=0;
 
        this.points = new geometry_msgs.Point[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            this.points[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
        }
 
        this.colors = new std_msgs.ColorRGBA[(int) colors_length];
        for (int a = 0; a < this.colors_length; a++) {
            this.colors[a] = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.text = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.mesh_resource = new String(__strbuf);
 
        this.mesh_use_embedded_materials = ins.readByte()!=0;
 
    }
 
    public visualization_msgs.Marker copy()
    {
        visualization_msgs.Marker outobj = new visualization_msgs.Marker();
        outobj.points_length = this.points_length;
 
        outobj.colors_length = this.colors_length;
 
        outobj.header = this.header.copy();
 
        outobj.ns = this.ns;
 
        outobj.id = this.id;
 
        outobj.type = this.type;
 
        outobj.action = this.action;
 
        outobj.pose = this.pose.copy();
 
        outobj.scale = this.scale.copy();
 
        outobj.color = this.color.copy();
 
        outobj.lifetime = this.lifetime.copy();
 
        outobj.frame_locked = this.frame_locked;
 
        outobj.points = new geometry_msgs.Point[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        outobj.colors = new std_msgs.ColorRGBA[(int) colors_length];
        for (int a = 0; a < this.colors_length; a++) {
            outobj.colors[a] = this.colors[a].copy();
        }
 
        outobj.text = this.text;
 
        outobj.mesh_resource = this.mesh_resource;
 
        outobj.mesh_use_embedded_materials = this.mesh_use_embedded_materials;
 
        return outobj;
    }
 
}

