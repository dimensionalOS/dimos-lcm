/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package visualization_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ImageMarker implements lcm.lcm.LCMEncodable
{
    public int points_length;

    public int outline_colors_length;

    public std_msgs.Header header;

    public String ns;

    public int id;

    public int type;

    public int action;

    public geometry_msgs.Point position;

    public float scale;

    public std_msgs.ColorRGBA outline_color;

    public byte filled;

    public std_msgs.ColorRGBA fill_color;

    public std_msgs.Duration lifetime;

    /**
     * LCM Type: geometry_msgs.Point[points_length]
     */
    public geometry_msgs.Point points[];

    /**
     * LCM Type: std_msgs.ColorRGBA[outline_colors_length]
     */
    public std_msgs.ColorRGBA outline_colors[];

 
    public ImageMarker()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3a3ea371b474d924L;
 
    public static final byte CIRCLE = (byte) 0;
    public static final byte LINE_STRIP = (byte) 1;
    public static final byte LINE_LIST = (byte) 2;
    public static final byte POLYGON = (byte) 3;
    public static final byte POINTS = (byte) 4;
    public static final byte ADD = (byte) 0;
    public static final byte REMOVE = (byte) 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(visualization_msgs.ImageMarker.class))
            return 0L;
 
        classes.add(visualization_msgs.ImageMarker.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
             + std_msgs.ColorRGBA._hashRecursive(classes)
             + std_msgs.ColorRGBA._hashRecursive(classes)
             + std_msgs.Duration._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
             + std_msgs.ColorRGBA._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.points_length); 
 
        outs.writeInt(this.outline_colors_length); 
 
        this.header._encodeRecursive(outs); 
 
        __strbuf = new char[this.ns.length()]; this.ns.getChars(0, this.ns.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.id); 
 
        outs.writeInt(this.type); 
 
        outs.writeInt(this.action); 
 
        this.position._encodeRecursive(outs); 
 
        outs.writeFloat(this.scale); 
 
        this.outline_color._encodeRecursive(outs); 
 
        outs.writeByte(this.filled); 
 
        this.fill_color._encodeRecursive(outs); 
 
        this.lifetime._encodeRecursive(outs); 
 
        for (int a = 0; a < this.points_length; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.outline_colors_length; a++) {
            this.outline_colors[a]._encodeRecursive(outs); 
        }
 
    }
 
    public ImageMarker(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ImageMarker(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static visualization_msgs.ImageMarker _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        visualization_msgs.ImageMarker o = new visualization_msgs.ImageMarker();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.points_length = ins.readInt();
 
        this.outline_colors_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.ns = new String(__strbuf);
 
        this.id = ins.readInt();
 
        this.type = ins.readInt();
 
        this.action = ins.readInt();
 
        this.position = geometry_msgs.Point._decodeRecursiveFactory(ins);
 
        this.scale = ins.readFloat();
 
        this.outline_color = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
 
        this.filled = ins.readByte();
 
        this.fill_color = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
 
        this.lifetime = std_msgs.Duration._decodeRecursiveFactory(ins);
 
        this.points = new geometry_msgs.Point[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            this.points[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
        }
 
        this.outline_colors = new std_msgs.ColorRGBA[(int) outline_colors_length];
        for (int a = 0; a < this.outline_colors_length; a++) {
            this.outline_colors[a] = std_msgs.ColorRGBA._decodeRecursiveFactory(ins);
        }
 
    }
 
    public visualization_msgs.ImageMarker copy()
    {
        visualization_msgs.ImageMarker outobj = new visualization_msgs.ImageMarker();
        outobj.points_length = this.points_length;
 
        outobj.outline_colors_length = this.outline_colors_length;
 
        outobj.header = this.header.copy();
 
        outobj.ns = this.ns;
 
        outobj.id = this.id;
 
        outobj.type = this.type;
 
        outobj.action = this.action;
 
        outobj.position = this.position.copy();
 
        outobj.scale = this.scale;
 
        outobj.outline_color = this.outline_color.copy();
 
        outobj.filled = this.filled;
 
        outobj.fill_color = this.fill_color.copy();
 
        outobj.lifetime = this.lifetime.copy();
 
        outobj.points = new geometry_msgs.Point[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        outobj.outline_colors = new std_msgs.ColorRGBA[(int) outline_colors_length];
        for (int a = 0; a < this.outline_colors_length; a++) {
            outobj.outline_colors[a] = this.outline_colors[a].copy();
        }
 
        return outobj;
    }
 
}

