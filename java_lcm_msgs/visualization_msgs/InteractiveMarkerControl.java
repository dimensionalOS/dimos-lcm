/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package visualization_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class InteractiveMarkerControl implements lcm.lcm.LCMEncodable
{
    public int markers_length;

    public String name;

    public geometry_msgs.Quaternion orientation;

    public byte orientation_mode;

    public byte interaction_mode;

    public boolean always_visible;

    /**
     * LCM Type: visualization_msgs.Marker[markers_length]
     */
    public visualization_msgs.Marker markers[];

    public boolean independent_marker_orientation;

    public String description;

 
    public InteractiveMarkerControl()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9e1db7d7740da609L;
 
    public static final byte INHERIT = (byte) 0;
    public static final byte FIXED = (byte) 1;
    public static final byte VIEW_FACING = (byte) 2;
    public static final byte NONE = (byte) 0;
    public static final byte MENU = (byte) 1;
    public static final byte BUTTON = (byte) 2;
    public static final byte MOVE_AXIS = (byte) 3;
    public static final byte MOVE_PLANE = (byte) 4;
    public static final byte ROTATE_AXIS = (byte) 5;
    public static final byte MOVE_ROTATE = (byte) 6;
    public static final byte MOVE_3D = (byte) 7;
    public static final byte ROTATE_3D = (byte) 8;
    public static final byte MOVE_ROTATE_3D = (byte) 9;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(visualization_msgs.InteractiveMarkerControl.class))
            return 0L;
 
        classes.add(visualization_msgs.InteractiveMarkerControl.class);
        long hash = LCM_FINGERPRINT_BASE
             + geometry_msgs.Quaternion._hashRecursive(classes)
             + visualization_msgs.Marker._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.markers_length); 
 
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        this.orientation._encodeRecursive(outs); 
 
        outs.writeByte(this.orientation_mode); 
 
        outs.writeByte(this.interaction_mode); 
 
        outs.writeByte( this.always_visible ? 1 : 0); 
 
        for (int a = 0; a < this.markers_length; a++) {
            this.markers[a]._encodeRecursive(outs); 
        }
 
        outs.writeByte( this.independent_marker_orientation ? 1 : 0); 
 
        __strbuf = new char[this.description.length()]; this.description.getChars(0, this.description.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public InteractiveMarkerControl(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public InteractiveMarkerControl(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static visualization_msgs.InteractiveMarkerControl _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        visualization_msgs.InteractiveMarkerControl o = new visualization_msgs.InteractiveMarkerControl();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.markers_length = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        this.orientation = geometry_msgs.Quaternion._decodeRecursiveFactory(ins);
 
        this.orientation_mode = ins.readByte();
 
        this.interaction_mode = ins.readByte();
 
        this.always_visible = ins.readByte()!=0;
 
        this.markers = new visualization_msgs.Marker[(int) markers_length];
        for (int a = 0; a < this.markers_length; a++) {
            this.markers[a] = visualization_msgs.Marker._decodeRecursiveFactory(ins);
        }
 
        this.independent_marker_orientation = ins.readByte()!=0;
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.description = new String(__strbuf);
 
    }
 
    public visualization_msgs.InteractiveMarkerControl copy()
    {
        visualization_msgs.InteractiveMarkerControl outobj = new visualization_msgs.InteractiveMarkerControl();
        outobj.markers_length = this.markers_length;
 
        outobj.name = this.name;
 
        outobj.orientation = this.orientation.copy();
 
        outobj.orientation_mode = this.orientation_mode;
 
        outobj.interaction_mode = this.interaction_mode;
 
        outobj.always_visible = this.always_visible;
 
        outobj.markers = new visualization_msgs.Marker[(int) markers_length];
        for (int a = 0; a < this.markers_length; a++) {
            outobj.markers[a] = this.markers[a].copy();
        }
 
        outobj.independent_marker_orientation = this.independent_marker_orientation;
 
        outobj.description = this.description;
 
        return outobj;
    }
 
}

