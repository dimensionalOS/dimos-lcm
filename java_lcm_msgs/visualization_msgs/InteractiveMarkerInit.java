/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package visualization_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class InteractiveMarkerInit implements lcm.lcm.LCMEncodable
{
    public int markers_length;

    public String server_id;

    public long seq_num;

    /**
     * LCM Type: visualization_msgs.InteractiveMarker[markers_length]
     */
    public visualization_msgs.InteractiveMarker markers[];

 
    public InteractiveMarkerInit()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0d2afaf11cff61d9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(visualization_msgs.InteractiveMarkerInit.class))
            return 0L;
 
        classes.add(visualization_msgs.InteractiveMarkerInit.class);
        long hash = LCM_FINGERPRINT_BASE
             + visualization_msgs.InteractiveMarker._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.markers_length); 
 
        __strbuf = new char[this.server_id.length()]; this.server_id.getChars(0, this.server_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeLong(this.seq_num); 
 
        for (int a = 0; a < this.markers_length; a++) {
            this.markers[a]._encodeRecursive(outs); 
        }
 
    }
 
    public InteractiveMarkerInit(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public InteractiveMarkerInit(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static visualization_msgs.InteractiveMarkerInit _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        visualization_msgs.InteractiveMarkerInit o = new visualization_msgs.InteractiveMarkerInit();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.markers_length = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.server_id = new String(__strbuf);
 
        this.seq_num = ins.readLong();
 
        this.markers = new visualization_msgs.InteractiveMarker[(int) markers_length];
        for (int a = 0; a < this.markers_length; a++) {
            this.markers[a] = visualization_msgs.InteractiveMarker._decodeRecursiveFactory(ins);
        }
 
    }
 
    public visualization_msgs.InteractiveMarkerInit copy()
    {
        visualization_msgs.InteractiveMarkerInit outobj = new visualization_msgs.InteractiveMarkerInit();
        outobj.markers_length = this.markers_length;
 
        outobj.server_id = this.server_id;
 
        outobj.seq_num = this.seq_num;
 
        outobj.markers = new visualization_msgs.InteractiveMarker[(int) markers_length];
        for (int a = 0; a < this.markers_length; a++) {
            outobj.markers[a] = this.markers[a].copy();
        }
 
        return outobj;
    }
 
}

