/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package visualization_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class InteractiveMarker implements lcm.lcm.LCMEncodable
{
    public int menu_entries_length;

    public int controls_length;

    public std_msgs.Header header;

    public geometry_msgs.Pose pose;

    public String name;

    public String description;

    public float scale;

    /**
     * LCM Type: visualization_msgs.MenuEntry[menu_entries_length]
     */
    public visualization_msgs.MenuEntry menu_entries[];

    /**
     * LCM Type: visualization_msgs.InteractiveMarkerControl[controls_length]
     */
    public visualization_msgs.InteractiveMarkerControl controls[];

 
    public InteractiveMarker()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe9ed8e5f9a72545fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(visualization_msgs.InteractiveMarker.class))
            return 0L;
 
        classes.add(visualization_msgs.InteractiveMarker.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Pose._hashRecursive(classes)
             + visualization_msgs.MenuEntry._hashRecursive(classes)
             + visualization_msgs.InteractiveMarkerControl._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.menu_entries_length); 
 
        outs.writeInt(this.controls_length); 
 
        this.header._encodeRecursive(outs); 
 
        this.pose._encodeRecursive(outs); 
 
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.description.length()]; this.description.getChars(0, this.description.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeFloat(this.scale); 
 
        for (int a = 0; a < this.menu_entries_length; a++) {
            this.menu_entries[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.controls_length; a++) {
            this.controls[a]._encodeRecursive(outs); 
        }
 
    }
 
    public InteractiveMarker(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public InteractiveMarker(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static visualization_msgs.InteractiveMarker _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        visualization_msgs.InteractiveMarker o = new visualization_msgs.InteractiveMarker();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.menu_entries_length = ins.readInt();
 
        this.controls_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.description = new String(__strbuf);
 
        this.scale = ins.readFloat();
 
        this.menu_entries = new visualization_msgs.MenuEntry[(int) menu_entries_length];
        for (int a = 0; a < this.menu_entries_length; a++) {
            this.menu_entries[a] = visualization_msgs.MenuEntry._decodeRecursiveFactory(ins);
        }
 
        this.controls = new visualization_msgs.InteractiveMarkerControl[(int) controls_length];
        for (int a = 0; a < this.controls_length; a++) {
            this.controls[a] = visualization_msgs.InteractiveMarkerControl._decodeRecursiveFactory(ins);
        }
 
    }
 
    public visualization_msgs.InteractiveMarker copy()
    {
        visualization_msgs.InteractiveMarker outobj = new visualization_msgs.InteractiveMarker();
        outobj.menu_entries_length = this.menu_entries_length;
 
        outobj.controls_length = this.controls_length;
 
        outobj.header = this.header.copy();
 
        outobj.pose = this.pose.copy();
 
        outobj.name = this.name;
 
        outobj.description = this.description;
 
        outobj.scale = this.scale;
 
        outobj.menu_entries = new visualization_msgs.MenuEntry[(int) menu_entries_length];
        for (int a = 0; a < this.menu_entries_length; a++) {
            outobj.menu_entries[a] = this.menu_entries[a].copy();
        }
 
        outobj.controls = new visualization_msgs.InteractiveMarkerControl[(int) controls_length];
        for (int a = 0; a < this.controls_length; a++) {
            outobj.controls[a] = this.controls[a].copy();
        }
 
        return outobj;
    }
 
}

