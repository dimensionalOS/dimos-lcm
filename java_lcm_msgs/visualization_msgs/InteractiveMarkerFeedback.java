/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package visualization_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class InteractiveMarkerFeedback implements lcm.lcm.LCMEncodable
{
    public std_msgs.Header header;

    public String client_id;

    public String marker_name;

    public String control_name;

    public byte event_type;

    public geometry_msgs.Pose pose;

    public int menu_entry_id;

    public geometry_msgs.Point mouse_point;

    public boolean mouse_point_valid;

 
    public InteractiveMarkerFeedback()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xd44e20643fb0d4f7L;
 
    public static final byte KEEP_ALIVE = (byte) 0;
    public static final byte POSE_UPDATE = (byte) 1;
    public static final byte MENU_SELECT = (byte) 2;
    public static final byte BUTTON_CLICK = (byte) 3;
    public static final byte MOUSE_DOWN = (byte) 4;
    public static final byte MOUSE_UP = (byte) 5;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(visualization_msgs.InteractiveMarkerFeedback.class))
            return 0L;
 
        classes.add(visualization_msgs.InteractiveMarkerFeedback.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Pose._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        this.header._encodeRecursive(outs); 
 
        __strbuf = new char[this.client_id.length()]; this.client_id.getChars(0, this.client_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.marker_name.length()]; this.marker_name.getChars(0, this.marker_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.control_name.length()]; this.control_name.getChars(0, this.control_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte(this.event_type); 
 
        this.pose._encodeRecursive(outs); 
 
        outs.writeInt(this.menu_entry_id); 
 
        this.mouse_point._encodeRecursive(outs); 
 
        outs.writeByte( this.mouse_point_valid ? 1 : 0); 
 
    }
 
    public InteractiveMarkerFeedback(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public InteractiveMarkerFeedback(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static visualization_msgs.InteractiveMarkerFeedback _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        visualization_msgs.InteractiveMarkerFeedback o = new visualization_msgs.InteractiveMarkerFeedback();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.client_id = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.marker_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.control_name = new String(__strbuf);
 
        this.event_type = ins.readByte();
 
        this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
        this.menu_entry_id = ins.readInt();
 
        this.mouse_point = geometry_msgs.Point._decodeRecursiveFactory(ins);
 
        this.mouse_point_valid = ins.readByte()!=0;
 
    }
 
    public visualization_msgs.InteractiveMarkerFeedback copy()
    {
        visualization_msgs.InteractiveMarkerFeedback outobj = new visualization_msgs.InteractiveMarkerFeedback();
        outobj.header = this.header.copy();
 
        outobj.client_id = this.client_id;
 
        outobj.marker_name = this.marker_name;
 
        outobj.control_name = this.control_name;
 
        outobj.event_type = this.event_type;
 
        outobj.pose = this.pose.copy();
 
        outobj.menu_entry_id = this.menu_entry_id;
 
        outobj.mouse_point = this.mouse_point.copy();
 
        outobj.mouse_point_valid = this.mouse_point_valid;
 
        return outobj;
    }
 
}

