/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package shape_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class MeshTriangle implements lcm.lcm.LCMEncodable
{
    /**
     * LCM Type: int32_t[3]
     */
    public int vertex_indices[];

 
    public MeshTriangle()
    {
        vertex_indices = new int[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2ff7303a4eea918dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(shape_msgs.MeshTriangle.class))
            return 0L;
 
        classes.add(shape_msgs.MeshTriangle.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.vertex_indices[a]); 
        }
 
    }
 
    public MeshTriangle(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public MeshTriangle(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static shape_msgs.MeshTriangle _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        shape_msgs.MeshTriangle o = new shape_msgs.MeshTriangle();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.vertex_indices = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vertex_indices[a] = ins.readInt();
        }
 
    }
 
    public shape_msgs.MeshTriangle copy()
    {
        shape_msgs.MeshTriangle outobj = new shape_msgs.MeshTriangle();
        outobj.vertex_indices = new int[(int) 3];
        System.arraycopy(this.vertex_indices, 0, outobj.vertex_indices, 0, 3); 
        return outobj;
    }
 
}

