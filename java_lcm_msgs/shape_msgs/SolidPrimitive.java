/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package shape_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class SolidPrimitive implements lcm.lcm.LCMEncodable
{
    public int dimensions_length;

    public byte type;

    /**
     * LCM Type: double[dimensions_length]
     */
    public double dimensions[];

 
    public SolidPrimitive()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb8a8e7178cab07acL;
 
    public static final byte BOX = (byte) 1;
    public static final byte SPHERE = (byte) 2;
    public static final byte CYLINDER = (byte) 3;
    public static final byte CONE = (byte) 4;
    public static final byte BOX_X = (byte) 0;
    public static final byte BOX_Y = (byte) 1;
    public static final byte BOX_Z = (byte) 2;
    public static final byte SPHERE_RADIUS = (byte) 0;
    public static final byte CYLINDER_HEIGHT = (byte) 0;
    public static final byte CYLINDER_RADIUS = (byte) 1;
    public static final byte CONE_HEIGHT = (byte) 0;
    public static final byte CONE_RADIUS = (byte) 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(shape_msgs.SolidPrimitive.class))
            return 0L;
 
        classes.add(shape_msgs.SolidPrimitive.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.dimensions_length); 
 
        outs.writeByte(this.type); 
 
        for (int a = 0; a < this.dimensions_length; a++) {
            outs.writeDouble(this.dimensions[a]); 
        }
 
    }
 
    public SolidPrimitive(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public SolidPrimitive(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static shape_msgs.SolidPrimitive _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        shape_msgs.SolidPrimitive o = new shape_msgs.SolidPrimitive();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.dimensions_length = ins.readInt();
 
        this.type = ins.readByte();
 
        this.dimensions = new double[(int) dimensions_length];
        for (int a = 0; a < this.dimensions_length; a++) {
            this.dimensions[a] = ins.readDouble();
        }
 
    }
 
    public shape_msgs.SolidPrimitive copy()
    {
        shape_msgs.SolidPrimitive outobj = new shape_msgs.SolidPrimitive();
        outobj.dimensions_length = this.dimensions_length;
 
        outobj.type = this.type;
 
        outobj.dimensions = new double[(int) dimensions_length];
        if (this.dimensions_length > 0)
            System.arraycopy(this.dimensions, 0, outobj.dimensions, 0, (int) this.dimensions_length); 
        return outobj;
    }
 
}

