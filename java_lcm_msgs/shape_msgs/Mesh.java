/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package shape_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Mesh implements lcm.lcm.LCMEncodable
{
    public int triangles_length;

    public int vertices_length;

    /**
     * LCM Type: shape_msgs.MeshTriangle[triangles_length]
     */
    public shape_msgs.MeshTriangle triangles[];

    /**
     * LCM Type: geometry_msgs.Point[vertices_length]
     */
    public geometry_msgs.Point vertices[];

 
    public Mesh()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdc739fb8d2f81ab9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(shape_msgs.Mesh.class))
            return 0L;
 
        classes.add(shape_msgs.Mesh.class);
        long hash = LCM_FINGERPRINT_BASE
             + shape_msgs.MeshTriangle._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.triangles_length); 
 
        outs.writeInt(this.vertices_length); 
 
        for (int a = 0; a < this.triangles_length; a++) {
            this.triangles[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.vertices_length; a++) {
            this.vertices[a]._encodeRecursive(outs); 
        }
 
    }
 
    public Mesh(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Mesh(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static shape_msgs.Mesh _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        shape_msgs.Mesh o = new shape_msgs.Mesh();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.triangles_length = ins.readInt();
 
        this.vertices_length = ins.readInt();
 
        this.triangles = new shape_msgs.MeshTriangle[(int) triangles_length];
        for (int a = 0; a < this.triangles_length; a++) {
            this.triangles[a] = shape_msgs.MeshTriangle._decodeRecursiveFactory(ins);
        }
 
        this.vertices = new geometry_msgs.Point[(int) vertices_length];
        for (int a = 0; a < this.vertices_length; a++) {
            this.vertices[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
        }
 
    }
 
    public shape_msgs.Mesh copy()
    {
        shape_msgs.Mesh outobj = new shape_msgs.Mesh();
        outobj.triangles_length = this.triangles_length;
 
        outobj.vertices_length = this.vertices_length;
 
        outobj.triangles = new shape_msgs.MeshTriangle[(int) triangles_length];
        for (int a = 0; a < this.triangles_length; a++) {
            outobj.triangles[a] = this.triangles[a].copy();
        }
 
        outobj.vertices = new geometry_msgs.Point[(int) vertices_length];
        for (int a = 0; a < this.vertices_length; a++) {
            outobj.vertices[a] = this.vertices[a].copy();
        }
 
        return outobj;
    }
 
}

