/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package diagnostic_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class DiagnosticArray implements lcm.lcm.LCMEncodable
{
    public int status_length;

    public std_msgs.Header header;

    /**
     * LCM Type: diagnostic_msgs.DiagnosticStatus[status_length]
     */
    public diagnostic_msgs.DiagnosticStatus status[];

 
    public DiagnosticArray()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0163c308c500b94dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(diagnostic_msgs.DiagnosticArray.class))
            return 0L;
 
        classes.add(diagnostic_msgs.DiagnosticArray.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + diagnostic_msgs.DiagnosticStatus._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.status_length); 
 
        this.header._encodeRecursive(outs); 
 
        for (int a = 0; a < this.status_length; a++) {
            this.status[a]._encodeRecursive(outs); 
        }
 
    }
 
    public DiagnosticArray(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public DiagnosticArray(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static diagnostic_msgs.DiagnosticArray _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        diagnostic_msgs.DiagnosticArray o = new diagnostic_msgs.DiagnosticArray();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.status_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.status = new diagnostic_msgs.DiagnosticStatus[(int) status_length];
        for (int a = 0; a < this.status_length; a++) {
            this.status[a] = diagnostic_msgs.DiagnosticStatus._decodeRecursiveFactory(ins);
        }
 
    }
 
    public diagnostic_msgs.DiagnosticArray copy()
    {
        diagnostic_msgs.DiagnosticArray outobj = new diagnostic_msgs.DiagnosticArray();
        outobj.status_length = this.status_length;
 
        outobj.header = this.header.copy();
 
        outobj.status = new diagnostic_msgs.DiagnosticStatus[(int) status_length];
        for (int a = 0; a < this.status_length; a++) {
            outobj.status[a] = this.status[a].copy();
        }
 
        return outobj;
    }
 
}

