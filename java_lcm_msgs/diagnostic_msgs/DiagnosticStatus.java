/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package diagnostic_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class DiagnosticStatus implements lcm.lcm.LCMEncodable
{
    public int values_length;

    public byte level;

    public String name;

    public String message;

    public String hardware_id;

    /**
     * LCM Type: diagnostic_msgs.KeyValue[values_length]
     */
    public diagnostic_msgs.KeyValue values[];

 
    public DiagnosticStatus()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3e3fb00c69778dfbL;
 
    public static final byte OK = (byte) 0;
    public static final byte WARN = (byte) 1;
    public static final byte ERROR = (byte) 2;
    public static final byte STALE = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(diagnostic_msgs.DiagnosticStatus.class))
            return 0L;
 
        classes.add(diagnostic_msgs.DiagnosticStatus.class);
        long hash = LCM_FINGERPRINT_BASE
             + diagnostic_msgs.KeyValue._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.values_length); 
 
        outs.writeByte(this.level); 
 
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.message.length()]; this.message.getChars(0, this.message.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.hardware_id.length()]; this.hardware_id.getChars(0, this.hardware_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < this.values_length; a++) {
            this.values[a]._encodeRecursive(outs); 
        }
 
    }
 
    public DiagnosticStatus(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public DiagnosticStatus(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static diagnostic_msgs.DiagnosticStatus _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        diagnostic_msgs.DiagnosticStatus o = new diagnostic_msgs.DiagnosticStatus();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.values_length = ins.readInt();
 
        this.level = ins.readByte();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.message = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.hardware_id = new String(__strbuf);
 
        this.values = new diagnostic_msgs.KeyValue[(int) values_length];
        for (int a = 0; a < this.values_length; a++) {
            this.values[a] = diagnostic_msgs.KeyValue._decodeRecursiveFactory(ins);
        }
 
    }
 
    public diagnostic_msgs.DiagnosticStatus copy()
    {
        diagnostic_msgs.DiagnosticStatus outobj = new diagnostic_msgs.DiagnosticStatus();
        outobj.values_length = this.values_length;
 
        outobj.level = this.level;
 
        outobj.name = this.name;
 
        outobj.message = this.message;
 
        outobj.hardware_id = this.hardware_id;
 
        outobj.values = new diagnostic_msgs.KeyValue[(int) values_length];
        for (int a = 0; a < this.values_length; a++) {
            outobj.values[a] = this.values[a].copy();
        }
 
        return outobj;
    }
 
}

