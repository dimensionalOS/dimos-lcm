/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ImageAnnotations implements lcm.lcm.LCMEncodable
{
    public int circles_length;

    public int points_length;

    public int texts_length;

    /**
     * LCM Type: foxglove_msgs.CircleAnnotation[circles_length]
     */
    public foxglove_msgs.CircleAnnotation circles[];

    /**
     * LCM Type: foxglove_msgs.PointsAnnotation[points_length]
     */
    public foxglove_msgs.PointsAnnotation points[];

    /**
     * LCM Type: foxglove_msgs.TextAnnotation[texts_length]
     */
    public foxglove_msgs.TextAnnotation texts[];

 
    public ImageAnnotations()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8b3a52c632c59b07L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.ImageAnnotations.class))
            return 0L;
 
        classes.add(foxglove_msgs.ImageAnnotations.class);
        long hash = LCM_FINGERPRINT_BASE
             + foxglove_msgs.CircleAnnotation._hashRecursive(classes)
             + foxglove_msgs.PointsAnnotation._hashRecursive(classes)
             + foxglove_msgs.TextAnnotation._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.circles_length); 
 
        outs.writeInt(this.points_length); 
 
        outs.writeInt(this.texts_length); 
 
        for (int a = 0; a < this.circles_length; a++) {
            this.circles[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.points_length; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.texts_length; a++) {
            this.texts[a]._encodeRecursive(outs); 
        }
 
    }
 
    public ImageAnnotations(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ImageAnnotations(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.ImageAnnotations _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.ImageAnnotations o = new foxglove_msgs.ImageAnnotations();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.circles_length = ins.readInt();
 
        this.points_length = ins.readInt();
 
        this.texts_length = ins.readInt();
 
        this.circles = new foxglove_msgs.CircleAnnotation[(int) circles_length];
        for (int a = 0; a < this.circles_length; a++) {
            this.circles[a] = foxglove_msgs.CircleAnnotation._decodeRecursiveFactory(ins);
        }
 
        this.points = new foxglove_msgs.PointsAnnotation[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            this.points[a] = foxglove_msgs.PointsAnnotation._decodeRecursiveFactory(ins);
        }
 
        this.texts = new foxglove_msgs.TextAnnotation[(int) texts_length];
        for (int a = 0; a < this.texts_length; a++) {
            this.texts[a] = foxglove_msgs.TextAnnotation._decodeRecursiveFactory(ins);
        }
 
    }
 
    public foxglove_msgs.ImageAnnotations copy()
    {
        foxglove_msgs.ImageAnnotations outobj = new foxglove_msgs.ImageAnnotations();
        outobj.circles_length = this.circles_length;
 
        outobj.points_length = this.points_length;
 
        outobj.texts_length = this.texts_length;
 
        outobj.circles = new foxglove_msgs.CircleAnnotation[(int) circles_length];
        for (int a = 0; a < this.circles_length; a++) {
            outobj.circles[a] = this.circles[a].copy();
        }
 
        outobj.points = new foxglove_msgs.PointsAnnotation[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        outobj.texts = new foxglove_msgs.TextAnnotation[(int) texts_length];
        for (int a = 0; a < this.texts_length; a++) {
            outobj.texts[a] = this.texts[a].copy();
        }
 
        return outobj;
    }
 
}

