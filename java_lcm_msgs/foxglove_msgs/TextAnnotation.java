/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class TextAnnotation implements lcm.lcm.LCMEncodable
{
    public builtin_interfaces.Time timestamp;

    public foxglove_msgs.Point2 position;

    public String text;

    public double font_size;

    public foxglove_msgs.Color text_color;

    public foxglove_msgs.Color background_color;

 
    public TextAnnotation()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1354af1f564701e9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.TextAnnotation.class))
            return 0L;
 
        classes.add(foxglove_msgs.TextAnnotation.class);
        long hash = LCM_FINGERPRINT_BASE
             + builtin_interfaces.Time._hashRecursive(classes)
             + foxglove_msgs.Point2._hashRecursive(classes)
             + foxglove_msgs.Color._hashRecursive(classes)
             + foxglove_msgs.Color._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp._encodeRecursive(outs); 
 
        this.position._encodeRecursive(outs); 
 
        __strbuf = new char[this.text.length()]; this.text.getChars(0, this.text.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeDouble(this.font_size); 
 
        this.text_color._encodeRecursive(outs); 
 
        this.background_color._encodeRecursive(outs); 
 
    }
 
    public TextAnnotation(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public TextAnnotation(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.TextAnnotation _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.TextAnnotation o = new foxglove_msgs.TextAnnotation();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
        this.position = foxglove_msgs.Point2._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.text = new String(__strbuf);
 
        this.font_size = ins.readDouble();
 
        this.text_color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
        this.background_color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
    }
 
    public foxglove_msgs.TextAnnotation copy()
    {
        foxglove_msgs.TextAnnotation outobj = new foxglove_msgs.TextAnnotation();
        outobj.timestamp = this.timestamp.copy();
 
        outobj.position = this.position.copy();
 
        outobj.text = this.text;
 
        outobj.font_size = this.font_size;
 
        outobj.text_color = this.text_color.copy();
 
        outobj.background_color = this.background_color.copy();
 
        return outobj;
    }
 
}

