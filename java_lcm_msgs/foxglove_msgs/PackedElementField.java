/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class PackedElementField implements lcm.lcm.LCMEncodable
{
    public String name;

    public int offset;

    public byte type;

 
    public PackedElementField()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x47c85ba0fafa16b8L;
 
    public static final byte UNKNOWN = (byte) 0;
    public static final byte UINT8 = (byte) 1;
    public static final byte INT8 = (byte) 2;
    public static final byte UINT16 = (byte) 3;
    public static final byte INT16 = (byte) 4;
    public static final byte UINT32 = (byte) 5;
    public static final byte INT32 = (byte) 6;
    public static final byte FLOAT32 = (byte) 7;
    public static final byte FLOAT64 = (byte) 8;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.PackedElementField.class))
            return 0L;
 
        classes.add(foxglove_msgs.PackedElementField.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.offset); 
 
        outs.writeByte(this.type); 
 
    }
 
    public PackedElementField(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public PackedElementField(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.PackedElementField _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.PackedElementField o = new foxglove_msgs.PackedElementField();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        this.offset = ins.readInt();
 
        this.type = ins.readByte();
 
    }
 
    public foxglove_msgs.PackedElementField copy()
    {
        foxglove_msgs.PackedElementField outobj = new foxglove_msgs.PackedElementField();
        outobj.name = this.name;
 
        outobj.offset = this.offset;
 
        outobj.type = this.type;
 
        return outobj;
    }
 
}

