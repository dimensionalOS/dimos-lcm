/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class LinePrimitive implements lcm.lcm.LCMEncodable
{
    public int points_length;

    public int colors_length;

    public int indices_length;

    public byte type;

    public geometry_msgs.Pose pose;

    public double thickness;

    public boolean scale_invariant;

    /**
     * LCM Type: geometry_msgs.Point[points_length]
     */
    public geometry_msgs.Point points[];

    public foxglove_msgs.Color color;

    /**
     * LCM Type: foxglove_msgs.Color[colors_length]
     */
    public foxglove_msgs.Color colors[];

    /**
     * LCM Type: int32_t[indices_length]
     */
    public int indices[];

 
    public LinePrimitive()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3b39f8eb653b3cd3L;
 
    public static final byte LINE_STRIP = (byte) 0;
    public static final byte LINE_LOOP = (byte) 1;
    public static final byte LINE_LIST = (byte) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.LinePrimitive.class))
            return 0L;
 
        classes.add(foxglove_msgs.LinePrimitive.class);
        long hash = LCM_FINGERPRINT_BASE
             + geometry_msgs.Pose._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
             + foxglove_msgs.Color._hashRecursive(classes)
             + foxglove_msgs.Color._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.points_length); 
 
        outs.writeInt(this.colors_length); 
 
        outs.writeInt(this.indices_length); 
 
        outs.writeByte(this.type); 
 
        this.pose._encodeRecursive(outs); 
 
        outs.writeDouble(this.thickness); 
 
        outs.writeByte( this.scale_invariant ? 1 : 0); 
 
        for (int a = 0; a < this.points_length; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
        this.color._encodeRecursive(outs); 
 
        for (int a = 0; a < this.colors_length; a++) {
            this.colors[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.indices_length; a++) {
            outs.writeInt(this.indices[a]); 
        }
 
    }
 
    public LinePrimitive(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public LinePrimitive(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.LinePrimitive _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.LinePrimitive o = new foxglove_msgs.LinePrimitive();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.points_length = ins.readInt();
 
        this.colors_length = ins.readInt();
 
        this.indices_length = ins.readInt();
 
        this.type = ins.readByte();
 
        this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
        this.thickness = ins.readDouble();
 
        this.scale_invariant = ins.readByte()!=0;
 
        this.points = new geometry_msgs.Point[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            this.points[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
        }
 
        this.color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
        this.colors = new foxglove_msgs.Color[(int) colors_length];
        for (int a = 0; a < this.colors_length; a++) {
            this.colors[a] = foxglove_msgs.Color._decodeRecursiveFactory(ins);
        }
 
        this.indices = new int[(int) indices_length];
        for (int a = 0; a < this.indices_length; a++) {
            this.indices[a] = ins.readInt();
        }
 
    }
 
    public foxglove_msgs.LinePrimitive copy()
    {
        foxglove_msgs.LinePrimitive outobj = new foxglove_msgs.LinePrimitive();
        outobj.points_length = this.points_length;
 
        outobj.colors_length = this.colors_length;
 
        outobj.indices_length = this.indices_length;
 
        outobj.type = this.type;
 
        outobj.pose = this.pose.copy();
 
        outobj.thickness = this.thickness;
 
        outobj.scale_invariant = this.scale_invariant;
 
        outobj.points = new geometry_msgs.Point[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        outobj.color = this.color.copy();
 
        outobj.colors = new foxglove_msgs.Color[(int) colors_length];
        for (int a = 0; a < this.colors_length; a++) {
            outobj.colors[a] = this.colors[a].copy();
        }
 
        outobj.indices = new int[(int) indices_length];
        if (this.indices_length > 0)
            System.arraycopy(this.indices, 0, outobj.indices, 0, (int) this.indices_length); 
        return outobj;
    }
 
}

