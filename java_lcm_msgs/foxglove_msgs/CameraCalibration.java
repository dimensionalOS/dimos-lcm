/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class CameraCalibration implements lcm.lcm.LCMEncodable
{
    public int d_length;

    public builtin_interfaces.Time timestamp;

    public String frame_id;

    public int width;

    public int height;

    public String distortion_model;

    /**
     * LCM Type: double[d_length]
     */
    public double d[];

    /**
     * LCM Type: double[9]
     */
    public double k[];

    /**
     * LCM Type: double[9]
     */
    public double r[];

    /**
     * LCM Type: double[12]
     */
    public double p[];

 
    public CameraCalibration()
    {
        k = new double[9];
        r = new double[9];
        p = new double[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x89c275083a857ce2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.CameraCalibration.class))
            return 0L;
 
        classes.add(foxglove_msgs.CameraCalibration.class);
        long hash = LCM_FINGERPRINT_BASE
             + builtin_interfaces.Time._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.d_length); 
 
        this.timestamp._encodeRecursive(outs); 
 
        __strbuf = new char[this.frame_id.length()]; this.frame_id.getChars(0, this.frame_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.width); 
 
        outs.writeInt(this.height); 
 
        __strbuf = new char[this.distortion_model.length()]; this.distortion_model.getChars(0, this.distortion_model.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < this.d_length; a++) {
            outs.writeDouble(this.d[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.k[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.r[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.p[a]); 
        }
 
    }
 
    public CameraCalibration(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public CameraCalibration(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.CameraCalibration _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.CameraCalibration o = new foxglove_msgs.CameraCalibration();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.d_length = ins.readInt();
 
        this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.frame_id = new String(__strbuf);
 
        this.width = ins.readInt();
 
        this.height = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.distortion_model = new String(__strbuf);
 
        this.d = new double[(int) d_length];
        for (int a = 0; a < this.d_length; a++) {
            this.d[a] = ins.readDouble();
        }
 
        this.k = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.k[a] = ins.readDouble();
        }
 
        this.r = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.r[a] = ins.readDouble();
        }
 
        this.p = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.p[a] = ins.readDouble();
        }
 
    }
 
    public foxglove_msgs.CameraCalibration copy()
    {
        foxglove_msgs.CameraCalibration outobj = new foxglove_msgs.CameraCalibration();
        outobj.d_length = this.d_length;
 
        outobj.timestamp = this.timestamp.copy();
 
        outobj.frame_id = this.frame_id;
 
        outobj.width = this.width;
 
        outobj.height = this.height;
 
        outobj.distortion_model = this.distortion_model;
 
        outobj.d = new double[(int) d_length];
        if (this.d_length > 0)
            System.arraycopy(this.d, 0, outobj.d, 0, (int) this.d_length); 
        outobj.k = new double[(int) 9];
        System.arraycopy(this.k, 0, outobj.k, 0, 9); 
        outobj.r = new double[(int) 9];
        System.arraycopy(this.r, 0, outobj.r, 0, 9); 
        outobj.p = new double[(int) 12];
        System.arraycopy(this.p, 0, outobj.p, 0, 12); 
        return outobj;
    }
 
}

