/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class SceneUpdate implements lcm.lcm.LCMEncodable
{
    public int deletions_length;

    public int entities_length;

    /**
     * LCM Type: foxglove_msgs.SceneEntityDeletion[deletions_length]
     */
    public foxglove_msgs.SceneEntityDeletion deletions[];

    /**
     * LCM Type: foxglove_msgs.SceneEntity[entities_length]
     */
    public foxglove_msgs.SceneEntity entities[];

 
    public SceneUpdate()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8f9d4ee9e2a92d31L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.SceneUpdate.class))
            return 0L;
 
        classes.add(foxglove_msgs.SceneUpdate.class);
        long hash = LCM_FINGERPRINT_BASE
             + foxglove_msgs.SceneEntityDeletion._hashRecursive(classes)
             + foxglove_msgs.SceneEntity._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.deletions_length); 
 
        outs.writeInt(this.entities_length); 
 
        for (int a = 0; a < this.deletions_length; a++) {
            this.deletions[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.entities_length; a++) {
            this.entities[a]._encodeRecursive(outs); 
        }
 
    }
 
    public SceneUpdate(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public SceneUpdate(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.SceneUpdate _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.SceneUpdate o = new foxglove_msgs.SceneUpdate();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.deletions_length = ins.readInt();
 
        this.entities_length = ins.readInt();
 
        this.deletions = new foxglove_msgs.SceneEntityDeletion[(int) deletions_length];
        for (int a = 0; a < this.deletions_length; a++) {
            this.deletions[a] = foxglove_msgs.SceneEntityDeletion._decodeRecursiveFactory(ins);
        }
 
        this.entities = new foxglove_msgs.SceneEntity[(int) entities_length];
        for (int a = 0; a < this.entities_length; a++) {
            this.entities[a] = foxglove_msgs.SceneEntity._decodeRecursiveFactory(ins);
        }
 
    }
 
    public foxglove_msgs.SceneUpdate copy()
    {
        foxglove_msgs.SceneUpdate outobj = new foxglove_msgs.SceneUpdate();
        outobj.deletions_length = this.deletions_length;
 
        outobj.entities_length = this.entities_length;
 
        outobj.deletions = new foxglove_msgs.SceneEntityDeletion[(int) deletions_length];
        for (int a = 0; a < this.deletions_length; a++) {
            outobj.deletions[a] = this.deletions[a].copy();
        }
 
        outobj.entities = new foxglove_msgs.SceneEntity[(int) entities_length];
        for (int a = 0; a < this.entities_length; a++) {
            outobj.entities[a] = this.entities[a].copy();
        }
 
        return outobj;
    }
 
}

