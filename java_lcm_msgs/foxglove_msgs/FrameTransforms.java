/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class FrameTransforms implements lcm.lcm.LCMEncodable
{
    public int transforms_length;

    /**
     * LCM Type: foxglove_msgs.FrameTransform[transforms_length]
     */
    public foxglove_msgs.FrameTransform transforms[];

 
    public FrameTransforms()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x37bc5cbce50a5ce2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.FrameTransforms.class))
            return 0L;
 
        classes.add(foxglove_msgs.FrameTransforms.class);
        long hash = LCM_FINGERPRINT_BASE
             + foxglove_msgs.FrameTransform._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.transforms_length); 
 
        for (int a = 0; a < this.transforms_length; a++) {
            this.transforms[a]._encodeRecursive(outs); 
        }
 
    }
 
    public FrameTransforms(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public FrameTransforms(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.FrameTransforms _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.FrameTransforms o = new foxglove_msgs.FrameTransforms();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.transforms_length = ins.readInt();
 
        this.transforms = new foxglove_msgs.FrameTransform[(int) transforms_length];
        for (int a = 0; a < this.transforms_length; a++) {
            this.transforms[a] = foxglove_msgs.FrameTransform._decodeRecursiveFactory(ins);
        }
 
    }
 
    public foxglove_msgs.FrameTransforms copy()
    {
        foxglove_msgs.FrameTransforms outobj = new foxglove_msgs.FrameTransforms();
        outobj.transforms_length = this.transforms_length;
 
        outobj.transforms = new foxglove_msgs.FrameTransform[(int) transforms_length];
        for (int a = 0; a < this.transforms_length; a++) {
            outobj.transforms[a] = this.transforms[a].copy();
        }
 
        return outobj;
    }
 
}

