/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class PosesInFrame implements lcm.lcm.LCMEncodable
{
    public int poses_length;

    public builtin_interfaces.Time timestamp;

    public String frame_id;

    /**
     * LCM Type: geometry_msgs.Pose[poses_length]
     */
    public geometry_msgs.Pose poses[];

 
    public PosesInFrame()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x65f6cee7d8076f4bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.PosesInFrame.class))
            return 0L;
 
        classes.add(foxglove_msgs.PosesInFrame.class);
        long hash = LCM_FINGERPRINT_BASE
             + builtin_interfaces.Time._hashRecursive(classes)
             + geometry_msgs.Pose._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.poses_length); 
 
        this.timestamp._encodeRecursive(outs); 
 
        __strbuf = new char[this.frame_id.length()]; this.frame_id.getChars(0, this.frame_id.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < this.poses_length; a++) {
            this.poses[a]._encodeRecursive(outs); 
        }
 
    }
 
    public PosesInFrame(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public PosesInFrame(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.PosesInFrame _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.PosesInFrame o = new foxglove_msgs.PosesInFrame();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.poses_length = ins.readInt();
 
        this.timestamp = builtin_interfaces.Time._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.frame_id = new String(__strbuf);
 
        this.poses = new geometry_msgs.Pose[(int) poses_length];
        for (int a = 0; a < this.poses_length; a++) {
            this.poses[a] = geometry_msgs.Pose._decodeRecursiveFactory(ins);
        }
 
    }
 
    public foxglove_msgs.PosesInFrame copy()
    {
        foxglove_msgs.PosesInFrame outobj = new foxglove_msgs.PosesInFrame();
        outobj.poses_length = this.poses_length;
 
        outobj.timestamp = this.timestamp.copy();
 
        outobj.frame_id = this.frame_id;
 
        outobj.poses = new geometry_msgs.Pose[(int) poses_length];
        for (int a = 0; a < this.poses_length; a++) {
            outobj.poses[a] = this.poses[a].copy();
        }
 
        return outobj;
    }
 
}

