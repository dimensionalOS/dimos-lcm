/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class TextPrimitive implements lcm.lcm.LCMEncodable
{
    public geometry_msgs.Pose pose;

    public boolean billboard;

    public double font_size;

    public boolean scale_invariant;

    public foxglove_msgs.Color color;

    public String text;

 
    public TextPrimitive()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3a761dcf4ac0e7c2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.TextPrimitive.class))
            return 0L;
 
        classes.add(foxglove_msgs.TextPrimitive.class);
        long hash = LCM_FINGERPRINT_BASE
             + geometry_msgs.Pose._hashRecursive(classes)
             + foxglove_msgs.Color._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        this.pose._encodeRecursive(outs); 
 
        outs.writeByte( this.billboard ? 1 : 0); 
 
        outs.writeDouble(this.font_size); 
 
        outs.writeByte( this.scale_invariant ? 1 : 0); 
 
        this.color._encodeRecursive(outs); 
 
        __strbuf = new char[this.text.length()]; this.text.getChars(0, this.text.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public TextPrimitive(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public TextPrimitive(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.TextPrimitive _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.TextPrimitive o = new foxglove_msgs.TextPrimitive();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
        this.billboard = ins.readByte()!=0;
 
        this.font_size = ins.readDouble();
 
        this.scale_invariant = ins.readByte()!=0;
 
        this.color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.text = new String(__strbuf);
 
    }
 
    public foxglove_msgs.TextPrimitive copy()
    {
        foxglove_msgs.TextPrimitive outobj = new foxglove_msgs.TextPrimitive();
        outobj.pose = this.pose.copy();
 
        outobj.billboard = this.billboard;
 
        outobj.font_size = this.font_size;
 
        outobj.scale_invariant = this.scale_invariant;
 
        outobj.color = this.color.copy();
 
        outobj.text = this.text;
 
        return outobj;
    }
 
}

