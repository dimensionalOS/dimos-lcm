/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package foxglove_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ArrowPrimitive implements lcm.lcm.LCMEncodable
{
    public geometry_msgs.Pose pose;

    public double shaft_length;

    public double shaft_diameter;

    public double head_length;

    public double head_diameter;

    public foxglove_msgs.Color color;

 
    public ArrowPrimitive()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb1f9d32968e60fbbL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(foxglove_msgs.ArrowPrimitive.class))
            return 0L;
 
        classes.add(foxglove_msgs.ArrowPrimitive.class);
        long hash = LCM_FINGERPRINT_BASE
             + geometry_msgs.Pose._hashRecursive(classes)
             + foxglove_msgs.Color._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.pose._encodeRecursive(outs); 
 
        outs.writeDouble(this.shaft_length); 
 
        outs.writeDouble(this.shaft_diameter); 
 
        outs.writeDouble(this.head_length); 
 
        outs.writeDouble(this.head_diameter); 
 
        this.color._encodeRecursive(outs); 
 
    }
 
    public ArrowPrimitive(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ArrowPrimitive(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static foxglove_msgs.ArrowPrimitive _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        foxglove_msgs.ArrowPrimitive o = new foxglove_msgs.ArrowPrimitive();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.pose = geometry_msgs.Pose._decodeRecursiveFactory(ins);
 
        this.shaft_length = ins.readDouble();
 
        this.shaft_diameter = ins.readDouble();
 
        this.head_length = ins.readDouble();
 
        this.head_diameter = ins.readDouble();
 
        this.color = foxglove_msgs.Color._decodeRecursiveFactory(ins);
 
    }
 
    public foxglove_msgs.ArrowPrimitive copy()
    {
        foxglove_msgs.ArrowPrimitive outobj = new foxglove_msgs.ArrowPrimitive();
        outobj.pose = this.pose.copy();
 
        outobj.shaft_length = this.shaft_length;
 
        outobj.shaft_diameter = this.shaft_diameter;
 
        outobj.head_length = this.head_length;
 
        outobj.head_diameter = this.head_diameter;
 
        outobj.color = this.color.copy();
 
        return outobj;
    }
 
}

