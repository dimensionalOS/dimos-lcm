/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package trajectory_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class JointTrajectoryPoint implements lcm.lcm.LCMEncodable
{
    public int positions_length;

    public int velocities_length;

    public int accelerations_length;

    public int effort_length;

    /**
     * LCM Type: double[positions_length]
     */
    public double positions[];

    /**
     * LCM Type: double[velocities_length]
     */
    public double velocities[];

    /**
     * LCM Type: double[accelerations_length]
     */
    public double accelerations[];

    /**
     * LCM Type: double[effort_length]
     */
    public double effort[];

    public std_msgs.Duration time_from_start;

 
    public JointTrajectoryPoint()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5f17dcae9da98292L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(trajectory_msgs.JointTrajectoryPoint.class))
            return 0L;
 
        classes.add(trajectory_msgs.JointTrajectoryPoint.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Duration._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.positions_length); 
 
        outs.writeInt(this.velocities_length); 
 
        outs.writeInt(this.accelerations_length); 
 
        outs.writeInt(this.effort_length); 
 
        for (int a = 0; a < this.positions_length; a++) {
            outs.writeDouble(this.positions[a]); 
        }
 
        for (int a = 0; a < this.velocities_length; a++) {
            outs.writeDouble(this.velocities[a]); 
        }
 
        for (int a = 0; a < this.accelerations_length; a++) {
            outs.writeDouble(this.accelerations[a]); 
        }
 
        for (int a = 0; a < this.effort_length; a++) {
            outs.writeDouble(this.effort[a]); 
        }
 
        this.time_from_start._encodeRecursive(outs); 
 
    }
 
    public JointTrajectoryPoint(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public JointTrajectoryPoint(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static trajectory_msgs.JointTrajectoryPoint _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        trajectory_msgs.JointTrajectoryPoint o = new trajectory_msgs.JointTrajectoryPoint();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.positions_length = ins.readInt();
 
        this.velocities_length = ins.readInt();
 
        this.accelerations_length = ins.readInt();
 
        this.effort_length = ins.readInt();
 
        this.positions = new double[(int) positions_length];
        for (int a = 0; a < this.positions_length; a++) {
            this.positions[a] = ins.readDouble();
        }
 
        this.velocities = new double[(int) velocities_length];
        for (int a = 0; a < this.velocities_length; a++) {
            this.velocities[a] = ins.readDouble();
        }
 
        this.accelerations = new double[(int) accelerations_length];
        for (int a = 0; a < this.accelerations_length; a++) {
            this.accelerations[a] = ins.readDouble();
        }
 
        this.effort = new double[(int) effort_length];
        for (int a = 0; a < this.effort_length; a++) {
            this.effort[a] = ins.readDouble();
        }
 
        this.time_from_start = std_msgs.Duration._decodeRecursiveFactory(ins);
 
    }
 
    public trajectory_msgs.JointTrajectoryPoint copy()
    {
        trajectory_msgs.JointTrajectoryPoint outobj = new trajectory_msgs.JointTrajectoryPoint();
        outobj.positions_length = this.positions_length;
 
        outobj.velocities_length = this.velocities_length;
 
        outobj.accelerations_length = this.accelerations_length;
 
        outobj.effort_length = this.effort_length;
 
        outobj.positions = new double[(int) positions_length];
        if (this.positions_length > 0)
            System.arraycopy(this.positions, 0, outobj.positions, 0, (int) this.positions_length); 
        outobj.velocities = new double[(int) velocities_length];
        if (this.velocities_length > 0)
            System.arraycopy(this.velocities, 0, outobj.velocities, 0, (int) this.velocities_length); 
        outobj.accelerations = new double[(int) accelerations_length];
        if (this.accelerations_length > 0)
            System.arraycopy(this.accelerations, 0, outobj.accelerations, 0, (int) this.accelerations_length); 
        outobj.effort = new double[(int) effort_length];
        if (this.effort_length > 0)
            System.arraycopy(this.effort, 0, outobj.effort, 0, (int) this.effort_length); 
        outobj.time_from_start = this.time_from_start.copy();
 
        return outobj;
    }
 
}

