/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package trajectory_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class MultiDOFJointTrajectory implements lcm.lcm.LCMEncodable
{
    public int joint_names_length;

    public int points_length;

    public std_msgs.Header header;

    /**
     * LCM Type: string[joint_names_length]
     */
    public String joint_names[];

    /**
     * LCM Type: trajectory_msgs.MultiDOFJointTrajectoryPoint[points_length]
     */
    public trajectory_msgs.MultiDOFJointTrajectoryPoint points[];

 
    public MultiDOFJointTrajectory()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf09db31afe774086L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(trajectory_msgs.MultiDOFJointTrajectory.class))
            return 0L;
 
        classes.add(trajectory_msgs.MultiDOFJointTrajectory.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + trajectory_msgs.MultiDOFJointTrajectoryPoint._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.joint_names_length); 
 
        outs.writeInt(this.points_length); 
 
        this.header._encodeRecursive(outs); 
 
        for (int a = 0; a < this.joint_names_length; a++) {
            __strbuf = new char[this.joint_names[a].length()]; this.joint_names[a].getChars(0, this.joint_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.points_length; a++) {
            this.points[a]._encodeRecursive(outs); 
        }
 
    }
 
    public MultiDOFJointTrajectory(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public MultiDOFJointTrajectory(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static trajectory_msgs.MultiDOFJointTrajectory _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        trajectory_msgs.MultiDOFJointTrajectory o = new trajectory_msgs.MultiDOFJointTrajectory();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.joint_names_length = ins.readInt();
 
        this.points_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.joint_names = new String[(int) joint_names_length];
        for (int a = 0; a < this.joint_names_length; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.joint_names[a] = new String(__strbuf);
        }
 
        this.points = new trajectory_msgs.MultiDOFJointTrajectoryPoint[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            this.points[a] = trajectory_msgs.MultiDOFJointTrajectoryPoint._decodeRecursiveFactory(ins);
        }
 
    }
 
    public trajectory_msgs.MultiDOFJointTrajectory copy()
    {
        trajectory_msgs.MultiDOFJointTrajectory outobj = new trajectory_msgs.MultiDOFJointTrajectory();
        outobj.joint_names_length = this.joint_names_length;
 
        outobj.points_length = this.points_length;
 
        outobj.header = this.header.copy();
 
        outobj.joint_names = new String[(int) joint_names_length];
        if (this.joint_names_length > 0)
            System.arraycopy(this.joint_names, 0, outobj.joint_names, 0, (int) this.joint_names_length); 
        outobj.points = new trajectory_msgs.MultiDOFJointTrajectoryPoint[(int) points_length];
        for (int a = 0; a < this.points_length; a++) {
            outobj.points[a] = this.points[a].copy();
        }
 
        return outobj;
    }
 
}

