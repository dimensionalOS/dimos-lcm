/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package stereo_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class DisparityImage implements lcm.lcm.LCMEncodable
{
    public std_msgs.Header header;

    public sensor_msgs.Image image;

    public float f;

    public float T;

    public sensor_msgs.RegionOfInterest valid_window;

    public float min_disparity;

    public float max_disparity;

    public float delta_d;

 
    public DisparityImage()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdeb7a557a2b9258aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(stereo_msgs.DisparityImage.class))
            return 0L;
 
        classes.add(stereo_msgs.DisparityImage.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + sensor_msgs.Image._hashRecursive(classes)
             + sensor_msgs.RegionOfInterest._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        this.image._encodeRecursive(outs); 
 
        outs.writeFloat(this.f); 
 
        outs.writeFloat(this.T); 
 
        this.valid_window._encodeRecursive(outs); 
 
        outs.writeFloat(this.min_disparity); 
 
        outs.writeFloat(this.max_disparity); 
 
        outs.writeFloat(this.delta_d); 
 
    }
 
    public DisparityImage(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public DisparityImage(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static stereo_msgs.DisparityImage _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        stereo_msgs.DisparityImage o = new stereo_msgs.DisparityImage();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.image = sensor_msgs.Image._decodeRecursiveFactory(ins);
 
        this.f = ins.readFloat();
 
        this.T = ins.readFloat();
 
        this.valid_window = sensor_msgs.RegionOfInterest._decodeRecursiveFactory(ins);
 
        this.min_disparity = ins.readFloat();
 
        this.max_disparity = ins.readFloat();
 
        this.delta_d = ins.readFloat();
 
    }
 
    public stereo_msgs.DisparityImage copy()
    {
        stereo_msgs.DisparityImage outobj = new stereo_msgs.DisparityImage();
        outobj.header = this.header.copy();
 
        outobj.image = this.image.copy();
 
        outobj.f = this.f;
 
        outobj.T = this.T;
 
        outobj.valid_window = this.valid_window.copy();
 
        outobj.min_disparity = this.min_disparity;
 
        outobj.max_disparity = this.max_disparity;
 
        outobj.delta_d = this.delta_d;
 
        return outobj;
    }
 
}

