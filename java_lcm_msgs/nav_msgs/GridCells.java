/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package nav_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class GridCells implements lcm.lcm.LCMEncodable
{
    public int cells_length;

    public std_msgs.Header header;

    public float cell_width;

    public float cell_height;

    /**
     * LCM Type: geometry_msgs.Point[cells_length]
     */
    public geometry_msgs.Point cells[];

 
    public GridCells()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb855326533062750L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(nav_msgs.GridCells.class))
            return 0L;
 
        classes.add(nav_msgs.GridCells.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Point._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.cells_length); 
 
        this.header._encodeRecursive(outs); 
 
        outs.writeFloat(this.cell_width); 
 
        outs.writeFloat(this.cell_height); 
 
        for (int a = 0; a < this.cells_length; a++) {
            this.cells[a]._encodeRecursive(outs); 
        }
 
    }
 
    public GridCells(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public GridCells(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static nav_msgs.GridCells _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        nav_msgs.GridCells o = new nav_msgs.GridCells();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.cells_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.cell_width = ins.readFloat();
 
        this.cell_height = ins.readFloat();
 
        this.cells = new geometry_msgs.Point[(int) cells_length];
        for (int a = 0; a < this.cells_length; a++) {
            this.cells[a] = geometry_msgs.Point._decodeRecursiveFactory(ins);
        }
 
    }
 
    public nav_msgs.GridCells copy()
    {
        nav_msgs.GridCells outobj = new nav_msgs.GridCells();
        outobj.cells_length = this.cells_length;
 
        outobj.header = this.header.copy();
 
        outobj.cell_width = this.cell_width;
 
        outobj.cell_height = this.cell_height;
 
        outobj.cells = new geometry_msgs.Point[(int) cells_length];
        for (int a = 0; a < this.cells_length; a++) {
            outobj.cells[a] = this.cells[a].copy();
        }
 
        return outobj;
    }
 
}

