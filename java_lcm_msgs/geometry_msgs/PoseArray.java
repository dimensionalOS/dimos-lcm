/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package geometry_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class PoseArray implements lcm.lcm.LCMEncodable
{
    public int poses_length;

    public std_msgs.Header header;

    /**
     * LCM Type: geometry_msgs.Pose[poses_length]
     */
    public geometry_msgs.Pose poses[];

 
    public PoseArray()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc779b6acc503055aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(geometry_msgs.PoseArray.class))
            return 0L;
 
        classes.add(geometry_msgs.PoseArray.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Pose._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.poses_length); 
 
        this.header._encodeRecursive(outs); 
 
        for (int a = 0; a < this.poses_length; a++) {
            this.poses[a]._encodeRecursive(outs); 
        }
 
    }
 
    public PoseArray(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public PoseArray(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static geometry_msgs.PoseArray _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        geometry_msgs.PoseArray o = new geometry_msgs.PoseArray();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.poses_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.poses = new geometry_msgs.Pose[(int) poses_length];
        for (int a = 0; a < this.poses_length; a++) {
            this.poses[a] = geometry_msgs.Pose._decodeRecursiveFactory(ins);
        }
 
    }
 
    public geometry_msgs.PoseArray copy()
    {
        geometry_msgs.PoseArray outobj = new geometry_msgs.PoseArray();
        outobj.poses_length = this.poses_length;
 
        outobj.header = this.header.copy();
 
        outobj.poses = new geometry_msgs.Pose[(int) poses_length];
        for (int a = 0; a < this.poses_length; a++) {
            outobj.poses[a] = this.poses[a].copy();
        }
 
        return outobj;
    }
 
}

