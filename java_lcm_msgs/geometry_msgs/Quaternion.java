/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package geometry_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Quaternion implements lcm.lcm.LCMEncodable
{
    public double x;

    public double y;

    public double z;

    public double w;

 
    public Quaternion()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9b1dee9dfc8c0515L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(geometry_msgs.Quaternion.class))
            return 0L;
 
        classes.add(geometry_msgs.Quaternion.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.x); 
 
        outs.writeDouble(this.y); 
 
        outs.writeDouble(this.z); 
 
        outs.writeDouble(this.w); 
 
    }
 
    public Quaternion(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Quaternion(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static geometry_msgs.Quaternion _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        geometry_msgs.Quaternion o = new geometry_msgs.Quaternion();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.x = ins.readDouble();
 
        this.y = ins.readDouble();
 
        this.z = ins.readDouble();
 
        this.w = ins.readDouble();
 
    }
 
    public geometry_msgs.Quaternion copy()
    {
        geometry_msgs.Quaternion outobj = new geometry_msgs.Quaternion();
        outobj.x = this.x;
 
        outobj.y = this.y;
 
        outobj.z = this.z;
 
        outobj.w = this.w;
 
        return outobj;
    }
 
}

