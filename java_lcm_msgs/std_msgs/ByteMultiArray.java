/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package std_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ByteMultiArray implements lcm.lcm.LCMEncodable
{
    public int data_length;

    public std_msgs.MultiArrayLayout layout;

    /**
     * LCM Type: int8_t[data_length]
     */
    public byte data[];

 
    public ByteMultiArray()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdcc1940b891be505L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(std_msgs.ByteMultiArray.class))
            return 0L;
 
        classes.add(std_msgs.ByteMultiArray.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.MultiArrayLayout._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.data_length); 
 
        this.layout._encodeRecursive(outs); 
 
        if (this.data_length > 0)
            outs.write(this.data, 0, (int) data_length);
 
    }
 
    public ByteMultiArray(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ByteMultiArray(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static std_msgs.ByteMultiArray _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        std_msgs.ByteMultiArray o = new std_msgs.ByteMultiArray();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.data_length = ins.readInt();
 
        this.layout = std_msgs.MultiArrayLayout._decodeRecursiveFactory(ins);
 
        this.data = new byte[(int) data_length];
        ins.readFully(this.data, 0, (int) data_length); 
    }
 
    public std_msgs.ByteMultiArray copy()
    {
        std_msgs.ByteMultiArray outobj = new std_msgs.ByteMultiArray();
        outobj.data_length = this.data_length;
 
        outobj.layout = this.layout.copy();
 
        outobj.data = new byte[(int) data_length];
        if (this.data_length > 0)
            System.arraycopy(this.data, 0, outobj.data, 0, (int) this.data_length); 
        return outobj;
    }
 
}

