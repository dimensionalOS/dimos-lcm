/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package std_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class MultiArrayLayout implements lcm.lcm.LCMEncodable
{
    public int dim_length;

    /**
     * LCM Type: std_msgs.MultiArrayDimension[dim_length]
     */
    public std_msgs.MultiArrayDimension dim[];

    public int data_offset;

 
    public MultiArrayLayout()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0bf4b5363481d321L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(std_msgs.MultiArrayLayout.class))
            return 0L;
 
        classes.add(std_msgs.MultiArrayLayout.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.MultiArrayDimension._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.dim_length); 
 
        for (int a = 0; a < this.dim_length; a++) {
            this.dim[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.data_offset); 
 
    }
 
    public MultiArrayLayout(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public MultiArrayLayout(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static std_msgs.MultiArrayLayout _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        std_msgs.MultiArrayLayout o = new std_msgs.MultiArrayLayout();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.dim_length = ins.readInt();
 
        this.dim = new std_msgs.MultiArrayDimension[(int) dim_length];
        for (int a = 0; a < this.dim_length; a++) {
            this.dim[a] = std_msgs.MultiArrayDimension._decodeRecursiveFactory(ins);
        }
 
        this.data_offset = ins.readInt();
 
    }
 
    public std_msgs.MultiArrayLayout copy()
    {
        std_msgs.MultiArrayLayout outobj = new std_msgs.MultiArrayLayout();
        outobj.dim_length = this.dim_length;
 
        outobj.dim = new std_msgs.MultiArrayDimension[(int) dim_length];
        for (int a = 0; a < this.dim_length; a++) {
            outobj.dim[a] = this.dim[a].copy();
        }
 
        outobj.data_offset = this.data_offset;
 
        return outobj;
    }
 
}

