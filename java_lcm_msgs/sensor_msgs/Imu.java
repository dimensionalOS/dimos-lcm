/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Imu implements lcm.lcm.LCMEncodable
{
    public std_msgs.Header header;

    public geometry_msgs.Quaternion orientation;

    /**
     * LCM Type: double[9]
     */
    public double orientation_covariance[];

    public geometry_msgs.Vector3 angular_velocity;

    /**
     * LCM Type: double[9]
     */
    public double angular_velocity_covariance[];

    public geometry_msgs.Vector3 linear_acceleration;

    /**
     * LCM Type: double[9]
     */
    public double linear_acceleration_covariance[];

 
    public Imu()
    {
        orientation_covariance = new double[9];
        angular_velocity_covariance = new double[9];
        linear_acceleration_covariance = new double[9];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x55c1e238541325f6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.Imu.class))
            return 0L;
 
        classes.add(sensor_msgs.Imu.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Quaternion._hashRecursive(classes)
             + geometry_msgs.Vector3._hashRecursive(classes)
             + geometry_msgs.Vector3._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        this.orientation._encodeRecursive(outs); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.orientation_covariance[a]); 
        }
 
        this.angular_velocity._encodeRecursive(outs); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.angular_velocity_covariance[a]); 
        }
 
        this.linear_acceleration._encodeRecursive(outs); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.linear_acceleration_covariance[a]); 
        }
 
    }
 
    public Imu(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Imu(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.Imu _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.Imu o = new sensor_msgs.Imu();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.orientation = geometry_msgs.Quaternion._decodeRecursiveFactory(ins);
 
        this.orientation_covariance = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.orientation_covariance[a] = ins.readDouble();
        }
 
        this.angular_velocity = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
        this.angular_velocity_covariance = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.angular_velocity_covariance[a] = ins.readDouble();
        }
 
        this.linear_acceleration = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
        this.linear_acceleration_covariance = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.linear_acceleration_covariance[a] = ins.readDouble();
        }
 
    }
 
    public sensor_msgs.Imu copy()
    {
        sensor_msgs.Imu outobj = new sensor_msgs.Imu();
        outobj.header = this.header.copy();
 
        outobj.orientation = this.orientation.copy();
 
        outobj.orientation_covariance = new double[(int) 9];
        System.arraycopy(this.orientation_covariance, 0, outobj.orientation_covariance, 0, 9); 
        outobj.angular_velocity = this.angular_velocity.copy();
 
        outobj.angular_velocity_covariance = new double[(int) 9];
        System.arraycopy(this.angular_velocity_covariance, 0, outobj.angular_velocity_covariance, 0, 9); 
        outobj.linear_acceleration = this.linear_acceleration.copy();
 
        outobj.linear_acceleration_covariance = new double[(int) 9];
        System.arraycopy(this.linear_acceleration_covariance, 0, outobj.linear_acceleration_covariance, 0, 9); 
        return outobj;
    }
 
}

