/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class LaserEcho implements lcm.lcm.LCMEncodable
{
    public int echoes_length;

    /**
     * LCM Type: float[echoes_length]
     */
    public float echoes[];

 
    public LaserEcho()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc45702116c7d0a2eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.LaserEcho.class))
            return 0L;
 
        classes.add(sensor_msgs.LaserEcho.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.echoes_length); 
 
        for (int a = 0; a < this.echoes_length; a++) {
            outs.writeFloat(this.echoes[a]); 
        }
 
    }
 
    public LaserEcho(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public LaserEcho(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.LaserEcho _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.LaserEcho o = new sensor_msgs.LaserEcho();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.echoes_length = ins.readInt();
 
        this.echoes = new float[(int) echoes_length];
        for (int a = 0; a < this.echoes_length; a++) {
            this.echoes[a] = ins.readFloat();
        }
 
    }
 
    public sensor_msgs.LaserEcho copy()
    {
        sensor_msgs.LaserEcho outobj = new sensor_msgs.LaserEcho();
        outobj.echoes_length = this.echoes_length;
 
        outobj.echoes = new float[(int) echoes_length];
        if (this.echoes_length > 0)
            System.arraycopy(this.echoes, 0, outobj.echoes, 0, (int) this.echoes_length); 
        return outobj;
    }
 
}

