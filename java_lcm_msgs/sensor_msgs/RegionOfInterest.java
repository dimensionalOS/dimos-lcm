/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class RegionOfInterest implements lcm.lcm.LCMEncodable
{
    public int x_offset;

    public int y_offset;

    public int height;

    public int width;

    public boolean do_rectify;

 
    public RegionOfInterest()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x398a869d05983f0eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.RegionOfInterest.class))
            return 0L;
 
        classes.add(sensor_msgs.RegionOfInterest.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.x_offset); 
 
        outs.writeInt(this.y_offset); 
 
        outs.writeInt(this.height); 
 
        outs.writeInt(this.width); 
 
        outs.writeByte( this.do_rectify ? 1 : 0); 
 
    }
 
    public RegionOfInterest(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public RegionOfInterest(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.RegionOfInterest _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.RegionOfInterest o = new sensor_msgs.RegionOfInterest();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.x_offset = ins.readInt();
 
        this.y_offset = ins.readInt();
 
        this.height = ins.readInt();
 
        this.width = ins.readInt();
 
        this.do_rectify = ins.readByte()!=0;
 
    }
 
    public sensor_msgs.RegionOfInterest copy()
    {
        sensor_msgs.RegionOfInterest outobj = new sensor_msgs.RegionOfInterest();
        outobj.x_offset = this.x_offset;
 
        outobj.y_offset = this.y_offset;
 
        outobj.height = this.height;
 
        outobj.width = this.width;
 
        outobj.do_rectify = this.do_rectify;
 
        return outobj;
    }
 
}

