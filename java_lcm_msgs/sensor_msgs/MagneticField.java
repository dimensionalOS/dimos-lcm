/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class MagneticField implements lcm.lcm.LCMEncodable
{
    public std_msgs.Header header;

    public geometry_msgs.Vector3 magnetic_field;

    /**
     * LCM Type: double[9]
     */
    public double magnetic_field_covariance[];

 
    public MagneticField()
    {
        magnetic_field_covariance = new double[9];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xbfeb021e4751ed88L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.MagneticField.class))
            return 0L;
 
        classes.add(sensor_msgs.MagneticField.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + geometry_msgs.Vector3._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        this.magnetic_field._encodeRecursive(outs); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.magnetic_field_covariance[a]); 
        }
 
    }
 
    public MagneticField(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public MagneticField(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.MagneticField _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.MagneticField o = new sensor_msgs.MagneticField();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.magnetic_field = geometry_msgs.Vector3._decodeRecursiveFactory(ins);
 
        this.magnetic_field_covariance = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.magnetic_field_covariance[a] = ins.readDouble();
        }
 
    }
 
    public sensor_msgs.MagneticField copy()
    {
        sensor_msgs.MagneticField outobj = new sensor_msgs.MagneticField();
        outobj.header = this.header.copy();
 
        outobj.magnetic_field = this.magnetic_field.copy();
 
        outobj.magnetic_field_covariance = new double[(int) 9];
        System.arraycopy(this.magnetic_field_covariance, 0, outobj.magnetic_field_covariance, 0, 9); 
        return outobj;
    }
 
}

