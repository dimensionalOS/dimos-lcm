/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class CameraInfo implements lcm.lcm.LCMEncodable
{
    public int D_length;

    public std_msgs.Header header;

    public int height;

    public int width;

    public String distortion_model;

    /**
     * LCM Type: double[D_length]
     */
    public double D[];

    /**
     * LCM Type: double[9]
     */
    public double K[];

    /**
     * LCM Type: double[9]
     */
    public double R[];

    /**
     * LCM Type: double[12]
     */
    public double P[];

    public int binning_x;

    public int binning_y;

    public sensor_msgs.RegionOfInterest roi;

 
    public CameraInfo()
    {
        K = new double[9];
        R = new double[9];
        P = new double[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb4ea6258bc6d0702L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.CameraInfo.class))
            return 0L;
 
        classes.add(sensor_msgs.CameraInfo.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
             + sensor_msgs.RegionOfInterest._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.D_length); 
 
        this.header._encodeRecursive(outs); 
 
        outs.writeInt(this.height); 
 
        outs.writeInt(this.width); 
 
        __strbuf = new char[this.distortion_model.length()]; this.distortion_model.getChars(0, this.distortion_model.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < this.D_length; a++) {
            outs.writeDouble(this.D[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.K[a]); 
        }
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.R[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.P[a]); 
        }
 
        outs.writeInt(this.binning_x); 
 
        outs.writeInt(this.binning_y); 
 
        this.roi._encodeRecursive(outs); 
 
    }
 
    public CameraInfo(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public CameraInfo(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.CameraInfo _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.CameraInfo o = new sensor_msgs.CameraInfo();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.D_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.height = ins.readInt();
 
        this.width = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.distortion_model = new String(__strbuf);
 
        this.D = new double[(int) D_length];
        for (int a = 0; a < this.D_length; a++) {
            this.D[a] = ins.readDouble();
        }
 
        this.K = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.K[a] = ins.readDouble();
        }
 
        this.R = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.R[a] = ins.readDouble();
        }
 
        this.P = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.P[a] = ins.readDouble();
        }
 
        this.binning_x = ins.readInt();
 
        this.binning_y = ins.readInt();
 
        this.roi = sensor_msgs.RegionOfInterest._decodeRecursiveFactory(ins);
 
    }
 
    public sensor_msgs.CameraInfo copy()
    {
        sensor_msgs.CameraInfo outobj = new sensor_msgs.CameraInfo();
        outobj.D_length = this.D_length;
 
        outobj.header = this.header.copy();
 
        outobj.height = this.height;
 
        outobj.width = this.width;
 
        outobj.distortion_model = this.distortion_model;
 
        outobj.D = new double[(int) D_length];
        if (this.D_length > 0)
            System.arraycopy(this.D, 0, outobj.D, 0, (int) this.D_length); 
        outobj.K = new double[(int) 9];
        System.arraycopy(this.K, 0, outobj.K, 0, 9); 
        outobj.R = new double[(int) 9];
        System.arraycopy(this.R, 0, outobj.R, 0, 9); 
        outobj.P = new double[(int) 12];
        System.arraycopy(this.P, 0, outobj.P, 0, 12); 
        outobj.binning_x = this.binning_x;
 
        outobj.binning_y = this.binning_y;
 
        outobj.roi = this.roi.copy();
 
        return outobj;
    }
 
}

