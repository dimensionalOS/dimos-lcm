/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class JointState implements lcm.lcm.LCMEncodable
{
    public int name_length;

    public int position_length;

    public int velocity_length;

    public int effort_length;

    public std_msgs.Header header;

    /**
     * LCM Type: string[name_length]
     */
    public String name[];

    /**
     * LCM Type: double[position_length]
     */
    public double position[];

    /**
     * LCM Type: double[velocity_length]
     */
    public double velocity[];

    /**
     * LCM Type: double[effort_length]
     */
    public double effort[];

 
    public JointState()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb69cc30d0d7668faL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.JointState.class))
            return 0L;
 
        classes.add(sensor_msgs.JointState.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.name_length); 
 
        outs.writeInt(this.position_length); 
 
        outs.writeInt(this.velocity_length); 
 
        outs.writeInt(this.effort_length); 
 
        this.header._encodeRecursive(outs); 
 
        for (int a = 0; a < this.name_length; a++) {
            __strbuf = new char[this.name[a].length()]; this.name[a].getChars(0, this.name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.position_length; a++) {
            outs.writeDouble(this.position[a]); 
        }
 
        for (int a = 0; a < this.velocity_length; a++) {
            outs.writeDouble(this.velocity[a]); 
        }
 
        for (int a = 0; a < this.effort_length; a++) {
            outs.writeDouble(this.effort[a]); 
        }
 
    }
 
    public JointState(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public JointState(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.JointState _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.JointState o = new sensor_msgs.JointState();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.name_length = ins.readInt();
 
        this.position_length = ins.readInt();
 
        this.velocity_length = ins.readInt();
 
        this.effort_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.name = new String[(int) name_length];
        for (int a = 0; a < this.name_length; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name[a] = new String(__strbuf);
        }
 
        this.position = new double[(int) position_length];
        for (int a = 0; a < this.position_length; a++) {
            this.position[a] = ins.readDouble();
        }
 
        this.velocity = new double[(int) velocity_length];
        for (int a = 0; a < this.velocity_length; a++) {
            this.velocity[a] = ins.readDouble();
        }
 
        this.effort = new double[(int) effort_length];
        for (int a = 0; a < this.effort_length; a++) {
            this.effort[a] = ins.readDouble();
        }
 
    }
 
    public sensor_msgs.JointState copy()
    {
        sensor_msgs.JointState outobj = new sensor_msgs.JointState();
        outobj.name_length = this.name_length;
 
        outobj.position_length = this.position_length;
 
        outobj.velocity_length = this.velocity_length;
 
        outobj.effort_length = this.effort_length;
 
        outobj.header = this.header.copy();
 
        outobj.name = new String[(int) name_length];
        if (this.name_length > 0)
            System.arraycopy(this.name, 0, outobj.name, 0, (int) this.name_length); 
        outobj.position = new double[(int) position_length];
        if (this.position_length > 0)
            System.arraycopy(this.position, 0, outobj.position, 0, (int) this.position_length); 
        outobj.velocity = new double[(int) velocity_length];
        if (this.velocity_length > 0)
            System.arraycopy(this.velocity, 0, outobj.velocity, 0, (int) this.velocity_length); 
        outobj.effort = new double[(int) effort_length];
        if (this.effort_length > 0)
            System.arraycopy(this.effort, 0, outobj.effort, 0, (int) this.effort_length); 
        return outobj;
    }
 
}

