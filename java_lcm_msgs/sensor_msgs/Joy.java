/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Joy implements lcm.lcm.LCMEncodable
{
    public int axes_length;

    public int buttons_length;

    public std_msgs.Header header;

    /**
     * LCM Type: float[axes_length]
     */
    public float axes[];

    /**
     * LCM Type: int32_t[buttons_length]
     */
    public int buttons[];

 
    public Joy()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x209d2c19077a692fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.Joy.class))
            return 0L;
 
        classes.add(sensor_msgs.Joy.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.axes_length); 
 
        outs.writeInt(this.buttons_length); 
 
        this.header._encodeRecursive(outs); 
 
        for (int a = 0; a < this.axes_length; a++) {
            outs.writeFloat(this.axes[a]); 
        }
 
        for (int a = 0; a < this.buttons_length; a++) {
            outs.writeInt(this.buttons[a]); 
        }
 
    }
 
    public Joy(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Joy(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.Joy _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.Joy o = new sensor_msgs.Joy();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.axes_length = ins.readInt();
 
        this.buttons_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.axes = new float[(int) axes_length];
        for (int a = 0; a < this.axes_length; a++) {
            this.axes[a] = ins.readFloat();
        }
 
        this.buttons = new int[(int) buttons_length];
        for (int a = 0; a < this.buttons_length; a++) {
            this.buttons[a] = ins.readInt();
        }
 
    }
 
    public sensor_msgs.Joy copy()
    {
        sensor_msgs.Joy outobj = new sensor_msgs.Joy();
        outobj.axes_length = this.axes_length;
 
        outobj.buttons_length = this.buttons_length;
 
        outobj.header = this.header.copy();
 
        outobj.axes = new float[(int) axes_length];
        if (this.axes_length > 0)
            System.arraycopy(this.axes, 0, outobj.axes, 0, (int) this.axes_length); 
        outobj.buttons = new int[(int) buttons_length];
        if (this.buttons_length > 0)
            System.arraycopy(this.buttons, 0, outobj.buttons, 0, (int) this.buttons_length); 
        return outobj;
    }
 
}

