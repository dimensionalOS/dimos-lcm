/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ChannelFloat32 implements lcm.lcm.LCMEncodable
{
    public int values_length;

    public String name;

    /**
     * LCM Type: float[values_length]
     */
    public float values[];

 
    public ChannelFloat32()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8cbe448953ebf073L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.ChannelFloat32.class))
            return 0L;
 
        classes.add(sensor_msgs.ChannelFloat32.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.values_length); 
 
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < this.values_length; a++) {
            outs.writeFloat(this.values[a]); 
        }
 
    }
 
    public ChannelFloat32(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ChannelFloat32(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.ChannelFloat32 _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.ChannelFloat32 o = new sensor_msgs.ChannelFloat32();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.values_length = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        this.values = new float[(int) values_length];
        for (int a = 0; a < this.values_length; a++) {
            this.values[a] = ins.readFloat();
        }
 
    }
 
    public sensor_msgs.ChannelFloat32 copy()
    {
        sensor_msgs.ChannelFloat32 outobj = new sensor_msgs.ChannelFloat32();
        outobj.values_length = this.values_length;
 
        outobj.name = this.name;
 
        outobj.values = new float[(int) values_length];
        if (this.values_length > 0)
            System.arraycopy(this.values, 0, outobj.values, 0, (int) this.values_length); 
        return outobj;
    }
 
}

