/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package sensor_msgs;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class BatteryState implements lcm.lcm.LCMEncodable
{
    public int cell_voltage_length;

    public int cell_temperature_length;

    public std_msgs.Header header;

    public float voltage;

    public float temperature;

    public float current;

    public float charge;

    public float capacity;

    public float design_capacity;

    public float percentage;

    public byte power_supply_status;

    public byte power_supply_health;

    public byte power_supply_technology;

    public boolean present;

    /**
     * LCM Type: float[cell_voltage_length]
     */
    public float cell_voltage[];

    /**
     * LCM Type: float[cell_temperature_length]
     */
    public float cell_temperature[];

    public String location;

    public String serial_number;

 
    public BatteryState()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8f419fb94c3b774dL;
 
    public static final byte POWER_SUPPLY_STATUS_UNKNOWN = (byte) 0;
    public static final byte POWER_SUPPLY_STATUS_CHARGING = (byte) 1;
    public static final byte POWER_SUPPLY_STATUS_DISCHARGING = (byte) 2;
    public static final byte POWER_SUPPLY_STATUS_NOT_CHARGING = (byte) 3;
    public static final byte POWER_SUPPLY_STATUS_FULL = (byte) 4;
    public static final byte POWER_SUPPLY_HEALTH_UNKNOWN = (byte) 0;
    public static final byte POWER_SUPPLY_HEALTH_GOOD = (byte) 1;
    public static final byte POWER_SUPPLY_HEALTH_OVERHEAT = (byte) 2;
    public static final byte POWER_SUPPLY_HEALTH_DEAD = (byte) 3;
    public static final byte POWER_SUPPLY_HEALTH_OVERVOLTAGE = (byte) 4;
    public static final byte POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = (byte) 5;
    public static final byte POWER_SUPPLY_HEALTH_COLD = (byte) 6;
    public static final byte POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = (byte) 7;
    public static final byte POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = (byte) 8;
    public static final byte POWER_SUPPLY_TECHNOLOGY_UNKNOWN = (byte) 0;
    public static final byte POWER_SUPPLY_TECHNOLOGY_NIMH = (byte) 1;
    public static final byte POWER_SUPPLY_TECHNOLOGY_LION = (byte) 2;
    public static final byte POWER_SUPPLY_TECHNOLOGY_LIPO = (byte) 3;
    public static final byte POWER_SUPPLY_TECHNOLOGY_LIFE = (byte) 4;
    public static final byte POWER_SUPPLY_TECHNOLOGY_NICD = (byte) 5;
    public static final byte POWER_SUPPLY_TECHNOLOGY_LIMN = (byte) 6;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sensor_msgs.BatteryState.class))
            return 0L;
 
        classes.add(sensor_msgs.BatteryState.class);
        long hash = LCM_FINGERPRINT_BASE
             + std_msgs.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.cell_voltage_length); 
 
        outs.writeInt(this.cell_temperature_length); 
 
        this.header._encodeRecursive(outs); 
 
        outs.writeFloat(this.voltage); 
 
        outs.writeFloat(this.temperature); 
 
        outs.writeFloat(this.current); 
 
        outs.writeFloat(this.charge); 
 
        outs.writeFloat(this.capacity); 
 
        outs.writeFloat(this.design_capacity); 
 
        outs.writeFloat(this.percentage); 
 
        outs.writeByte(this.power_supply_status); 
 
        outs.writeByte(this.power_supply_health); 
 
        outs.writeByte(this.power_supply_technology); 
 
        outs.writeByte( this.present ? 1 : 0); 
 
        for (int a = 0; a < this.cell_voltage_length; a++) {
            outs.writeFloat(this.cell_voltage[a]); 
        }
 
        for (int a = 0; a < this.cell_temperature_length; a++) {
            outs.writeFloat(this.cell_temperature[a]); 
        }
 
        __strbuf = new char[this.location.length()]; this.location.getChars(0, this.location.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.serial_number.length()]; this.serial_number.getChars(0, this.serial_number.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public BatteryState(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public BatteryState(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sensor_msgs.BatteryState _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sensor_msgs.BatteryState o = new sensor_msgs.BatteryState();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.cell_voltage_length = ins.readInt();
 
        this.cell_temperature_length = ins.readInt();
 
        this.header = std_msgs.Header._decodeRecursiveFactory(ins);
 
        this.voltage = ins.readFloat();
 
        this.temperature = ins.readFloat();
 
        this.current = ins.readFloat();
 
        this.charge = ins.readFloat();
 
        this.capacity = ins.readFloat();
 
        this.design_capacity = ins.readFloat();
 
        this.percentage = ins.readFloat();
 
        this.power_supply_status = ins.readByte();
 
        this.power_supply_health = ins.readByte();
 
        this.power_supply_technology = ins.readByte();
 
        this.present = ins.readByte()!=0;
 
        this.cell_voltage = new float[(int) cell_voltage_length];
        for (int a = 0; a < this.cell_voltage_length; a++) {
            this.cell_voltage[a] = ins.readFloat();
        }
 
        this.cell_temperature = new float[(int) cell_temperature_length];
        for (int a = 0; a < this.cell_temperature_length; a++) {
            this.cell_temperature[a] = ins.readFloat();
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.location = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.serial_number = new String(__strbuf);
 
    }
 
    public sensor_msgs.BatteryState copy()
    {
        sensor_msgs.BatteryState outobj = new sensor_msgs.BatteryState();
        outobj.cell_voltage_length = this.cell_voltage_length;
 
        outobj.cell_temperature_length = this.cell_temperature_length;
 
        outobj.header = this.header.copy();
 
        outobj.voltage = this.voltage;
 
        outobj.temperature = this.temperature;
 
        outobj.current = this.current;
 
        outobj.charge = this.charge;
 
        outobj.capacity = this.capacity;
 
        outobj.design_capacity = this.design_capacity;
 
        outobj.percentage = this.percentage;
 
        outobj.power_supply_status = this.power_supply_status;
 
        outobj.power_supply_health = this.power_supply_health;
 
        outobj.power_supply_technology = this.power_supply_technology;
 
        outobj.present = this.present;
 
        outobj.cell_voltage = new float[(int) cell_voltage_length];
        if (this.cell_voltage_length > 0)
            System.arraycopy(this.cell_voltage, 0, outobj.cell_voltage, 0, (int) this.cell_voltage_length); 
        outobj.cell_temperature = new float[(int) cell_temperature_length];
        if (this.cell_temperature_length > 0)
            System.arraycopy(this.cell_temperature, 0, outobj.cell_temperature, 0, (int) this.cell_temperature_length); 
        outobj.location = this.location;
 
        outobj.serial_number = this.serial_number;
 
        return outobj;
    }
 
}

