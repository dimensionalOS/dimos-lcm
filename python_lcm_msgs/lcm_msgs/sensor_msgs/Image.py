"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct
import sys

from lcm_msgs import std_msgs
class Image(object):

    msg_name = "sensor_msgs.Image"

    __slots__ = ["data_length", "header", "height", "width", "encoding", "is_bigendian", "step", "data"]

    __typenames__ = ["int32_t", "std_msgs.Header", "int32_t", "int32_t", "string", "byte", "int32_t", "byte"]

    __dimensions__ = [None, None, None, None, None, None, None, ["data_length"]]

    data_length: 'int32_t'
    header: std_msgs.Header
    height: 'int32_t'
    width: 'int32_t'
    encoding: 'string'
    is_bigendian: 'byte'
    step: 'int32_t'
    data: 'byte'

    def __init__(self, data_length=0, header=std_msgs.Header(), height=0, width=0, encoding="", is_bigendian=0, step=0, data=b""):
        # LCM Type: int32_t
        self.data_length = data_length
        # LCM Type: std_msgs.Header
        self.header = header
        # LCM Type: int32_t
        self.height = height
        # LCM Type: int32_t
        self.width = width
        # LCM Type: string
        self.encoding = encoding
        # LCM Type: byte
        self.is_bigendian = is_bigendian
        # LCM Type: int32_t
        self.step = step
        # LCM Type: byte[data_length]
        self.data = data

    def lcm_encode(self):
        buf = BytesIO()
        buf.write(Image._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.data_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ii", self.height, self.width))
        __encoding_encoded = self.encoding.encode('utf-8')
        buf.write(struct.pack('>I', len(__encoding_encoded)+1))
        buf.write(__encoding_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">Bi", self.is_bigendian, self.step))
        buf.write(bytearray(self.data[:self.data_length]))

    @classmethod
    def lcm_decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = cls()
        self.data_length = struct.unpack(">i", buf.read(4))[0]
        self.header = cls._get_field_type('header')._decode_one(buf)
        self.height, self.width = struct.unpack(">ii", buf.read(8))
        __encoding_len = struct.unpack('>I', buf.read(4))[0]
        self.encoding = buf.read(__encoding_len)[:-1].decode('utf-8', 'replace')
        self.is_bigendian, self.step = struct.unpack(">Bi", buf.read(5))
        self.data = buf.read(self.data_length)
        return self

    @classmethod
    def _get_field_type(cls, field_name):
        """Get the type for a field from annotations."""
        annotation = cls.__annotations__.get(field_name)
        if annotation is None:
            return None
        if isinstance(annotation, str):
            module = sys.modules[cls.__module__]
            if hasattr(module, annotation):
                return getattr(module, annotation)
            return None
        return annotation

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x79d36c21d3c16094+ std_msgs.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

