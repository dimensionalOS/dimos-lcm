"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import std_msgs
from . import *
from .LaserEcho import LaserEcho
class MultiEchoLaserScan(object):

    __slots__ = ["ranges_length", "intensities_length", "header", "angle_min", "angle_max", "angle_increment", "time_increment", "scan_time", "range_min", "range_max", "ranges", "intensities"]

    __typenames__ = ["int32_t", "int32_t", "std_msgs.Header", "float", "float", "float", "float", "float", "float", "float", "LaserEcho", "LaserEcho"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, ["ranges_length"], ["intensities_length"]]

    def __init__(self):
        self.ranges_length = 0
        """ LCM Type: int32_t """
        self.intensities_length = 0
        """ LCM Type: int32_t """
        self.header = std_msgs.Header()
        """ LCM Type: std_msgs.Header """
        self.angle_min = 0.0
        """ LCM Type: float """
        self.angle_max = 0.0
        """ LCM Type: float """
        self.angle_increment = 0.0
        """ LCM Type: float """
        self.time_increment = 0.0
        """ LCM Type: float """
        self.scan_time = 0.0
        """ LCM Type: float """
        self.range_min = 0.0
        """ LCM Type: float """
        self.range_max = 0.0
        """ LCM Type: float """
        self.ranges = []
        """ LCM Type: LaserEcho[ranges_length] """
        self.intensities = []
        """ LCM Type: LaserEcho[intensities_length] """

    def encode(self):
        buf = BytesIO()
        buf.write(MultiEchoLaserScan._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.ranges_length, self.intensities_length))
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">fffffff", self.angle_min, self.angle_max, self.angle_increment, self.time_increment, self.scan_time, self.range_min, self.range_max))
        for i0 in range(self.ranges_length):
            assert self.ranges[i0]._get_packed_fingerprint() == LaserEcho._get_packed_fingerprint()
            self.ranges[i0]._encode_one(buf)
        for i0 in range(self.intensities_length):
            assert self.intensities[i0]._get_packed_fingerprint() == LaserEcho._get_packed_fingerprint()
            self.intensities[i0]._encode_one(buf)

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = MultiEchoLaserScan()
        self.ranges_length, self.intensities_length = struct.unpack(">ii", buf.read(8))
        self.header = std_msgs.Header._decode_one(buf)
        self.angle_min, self.angle_max, self.angle_increment, self.time_increment, self.scan_time, self.range_min, self.range_max = struct.unpack(">fffffff", buf.read(28))
        self.ranges = []
        for i0 in range(self.ranges_length):
            self.ranges.append(LaserEcho._decode_one(buf))
        self.intensities = []
        for i0 in range(self.intensities_length):
            self.intensities.append(LaserEcho._decode_one(buf))
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0xf02a6253849d18e2+ std_msgs.Header._get_hash_recursive(newparents)+ LaserEcho._get_hash_recursive(newparents)+ LaserEcho._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

