"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct
import sys

from lcm_msgs import std_msgs
class Range(object):

    msg_name = "sensor_msgs.Range"

    __slots__ = ["header", "radiation_type", "field_of_view", "min_range", "max_range", "range"]

    __typenames__ = ["std_msgs.Header", "byte", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None]

    header: std_msgs.Header
    radiation_type: 'byte'
    field_of_view: 'float'
    min_range: 'float'
    max_range: 'float'
    range: 'float'

    ULTRASOUND = 0
    INFRARED = 1

    def __init__(self, header=std_msgs.Header(), radiation_type=0, field_of_view=0.0, min_range=0.0, max_range=0.0, range=0.0):
        # LCM Type: std_msgs.Header
        self.header = header
        # LCM Type: byte
        self.radiation_type = radiation_type
        # LCM Type: float
        self.field_of_view = field_of_view
        # LCM Type: float
        self.min_range = min_range
        # LCM Type: float
        self.max_range = max_range
        # LCM Type: float
        self.range = range

    def lcm_encode(self):
        buf = BytesIO()
        buf.write(Range._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">Bffff", self.radiation_type, self.field_of_view, self.min_range, self.max_range, self.range))

    @classmethod
    def lcm_decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = cls()
        self.header = cls._get_field_type('header')._decode_one(buf)
        self.radiation_type, self.field_of_view, self.min_range, self.max_range, self.range = struct.unpack(">Bffff", buf.read(17))
        return self

    @classmethod
    def _get_field_type(cls, field_name):
        """Get the type for a field from annotations."""
        annotation = cls.__annotations__.get(field_name)
        if annotation is None:
            return None
        if isinstance(annotation, str):
            module = sys.modules[cls.__module__]
            if hasattr(module, annotation):
                return getattr(module, annotation)
            return None
        return annotation

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0xaaf9249a1465f86a+ std_msgs.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

