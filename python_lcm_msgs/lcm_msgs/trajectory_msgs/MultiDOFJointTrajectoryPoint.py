"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class MultiDOFJointTrajectoryPoint(object):

    msg_name = "trajectory_msgs.MultiDOFJointTrajectoryPoint"

    __slots__ = ["transforms_length", "velocities_length", "accelerations_length", "transforms", "velocities", "accelerations", "time_from_start"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "geometry_msgs.Transform", "geometry_msgs.Twist", "geometry_msgs.Twist", "std_msgs.Duration"]

    __dimensions__ = [None, None, None, ["transforms_length"], ["velocities_length"], ["accelerations_length"], None]

    def __init__(self, transforms_length=0, velocities_length=0, accelerations_length=0, transforms=[], velocities=[], accelerations=[], time_from_start=std_msgs.Duration()):
        # LCM Type: int32_t
        self.transforms_length = transforms_length
        # LCM Type: int32_t
        self.velocities_length = velocities_length
        # LCM Type: int32_t
        self.accelerations_length = accelerations_length
        # LCM Type: geometry_msgs.Transform[transforms_length]
        self.transforms = transforms
        # LCM Type: geometry_msgs.Twist[velocities_length]
        self.velocities = velocities
        # LCM Type: geometry_msgs.Twist[accelerations_length]
        self.accelerations = accelerations
        # LCM Type: std_msgs.Duration
        self.time_from_start = time_from_start

    def encode(self):
        buf = BytesIO()
        buf.write(MultiDOFJointTrajectoryPoint._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iii", self.transforms_length, self.velocities_length, self.accelerations_length))
        for i0 in range(self.transforms_length):
            assert self.transforms[i0]._get_packed_fingerprint() == geometry_msgs.Transform._get_packed_fingerprint()
            self.transforms[i0]._encode_one(buf)
        for i0 in range(self.velocities_length):
            assert self.velocities[i0]._get_packed_fingerprint() == geometry_msgs.Twist._get_packed_fingerprint()
            self.velocities[i0]._encode_one(buf)
        for i0 in range(self.accelerations_length):
            assert self.accelerations[i0]._get_packed_fingerprint() == geometry_msgs.Twist._get_packed_fingerprint()
            self.accelerations[i0]._encode_one(buf)
        assert self.time_from_start._get_packed_fingerprint() == std_msgs.Duration._get_packed_fingerprint()
        self.time_from_start._encode_one(buf)

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = MultiDOFJointTrajectoryPoint()
        self.transforms_length, self.velocities_length, self.accelerations_length = struct.unpack(">iii", buf.read(12))
        self.transforms = []
        for i0 in range(self.transforms_length):
            self.transforms.append(geometry_msgs.Transform._decode_one(buf))
        self.velocities = []
        for i0 in range(self.velocities_length):
            self.velocities.append(geometry_msgs.Twist._decode_one(buf))
        self.accelerations = []
        for i0 in range(self.accelerations_length):
            self.accelerations.append(geometry_msgs.Twist._decode_one(buf))
        self.time_from_start = std_msgs.Duration._decode_one(buf)
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x6afb214a921f4cfa+ geometry_msgs.Transform._get_hash_recursive(newparents)+ geometry_msgs.Twist._get_hash_recursive(newparents)+ geometry_msgs.Twist._get_hash_recursive(newparents)+ std_msgs.Duration._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

