"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import lcm_msgs.foxglove_msgs as foxglove_msgs

import lcm_msgs.builtin_interfaces as builtin_interfaces

class PointsAnnotation(object):

    msg_name = "foxglove_msgs.PointsAnnotation"

    __slots__ = ["points_length", "outline_colors_length", "timestamp", "type", "points", "outline_color", "outline_colors", "fill_color", "thickness"]

    __typenames__ = ["int32_t", "int32_t", "builtin_interfaces.Time", "byte", "foxglove_msgs.Point2", "foxglove_msgs.Color", "foxglove_msgs.Color", "foxglove_msgs.Color", "double"]

    __dimensions__ = [None, None, None, None, ["points_length"], None, ["outline_colors_length"], None, None]

    UNKNOWN = 0
    POINTS = 1
    LINE_LOOP = 2
    LINE_STRIP = 3
    LINE_LIST = 4

    def __init__(self, points_length=0, outline_colors_length=0, timestamp=builtin_interfaces.Time(), type=0, points=[], outline_color=foxglove_msgs.Color(), outline_colors=[], fill_color=foxglove_msgs.Color(), thickness=0.0):
        # LCM Type: int32_t
        self.points_length = points_length
        # LCM Type: int32_t
        self.outline_colors_length = outline_colors_length
        # LCM Type: builtin_interfaces.Time
        self.timestamp = timestamp
        # LCM Type: byte
        self.type = type
        # LCM Type: foxglove_msgs.Point2[points_length]
        self.points = points
        # LCM Type: foxglove_msgs.Color
        self.outline_color = outline_color
        # LCM Type: foxglove_msgs.Color[outline_colors_length]
        self.outline_colors = outline_colors
        # LCM Type: foxglove_msgs.Color
        self.fill_color = fill_color
        # LCM Type: double
        self.thickness = thickness

    def encode(self):
        buf = BytesIO()
        buf.write(PointsAnnotation._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ii", self.points_length, self.outline_colors_length))
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        buf.write(struct.pack(">B", self.type))
        for i0 in range(self.points_length):
            assert self.points[i0]._get_packed_fingerprint() == foxglove_msgs.Point2._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)
        assert self.outline_color._get_packed_fingerprint() == foxglove_msgs.Color._get_packed_fingerprint()
        self.outline_color._encode_one(buf)
        for i0 in range(self.outline_colors_length):
            assert self.outline_colors[i0]._get_packed_fingerprint() == foxglove_msgs.Color._get_packed_fingerprint()
            self.outline_colors[i0]._encode_one(buf)
        assert self.fill_color._get_packed_fingerprint() == foxglove_msgs.Color._get_packed_fingerprint()
        self.fill_color._encode_one(buf)
        buf.write(struct.pack(">d", self.thickness))

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = PointsAnnotation()
        self.points_length, self.outline_colors_length = struct.unpack(">ii", buf.read(8))
        self.timestamp = builtin_interfaces.Time._decode_one(buf)
        self.type = struct.unpack(">B", buf.read(1))[0]
        self.points = []
        for i0 in range(self.points_length):
            self.points.append(foxglove_msgs.Point2._decode_one(buf))
        self.outline_color = foxglove_msgs.Color._decode_one(buf)
        self.outline_colors = []
        for i0 in range(self.outline_colors_length):
            self.outline_colors.append(foxglove_msgs.Color._decode_one(buf))
        self.fill_color = foxglove_msgs.Color._decode_one(buf)
        self.thickness = struct.unpack(">d", buf.read(8))[0]
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x97465363cc7c2a18+ builtin_interfaces.Time._get_hash_recursive(newparents)+ foxglove_msgs.Point2._get_hash_recursive(newparents)+ foxglove_msgs.Color._get_hash_recursive(newparents)+ foxglove_msgs.Color._get_hash_recursive(newparents)+ foxglove_msgs.Color._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

