"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct
import sys

from lcm_msgs import builtin_interfaces
class Log(object):

    msg_name = "foxglove_msgs.Log"

    __slots__ = ["timestamp", "level", "message", "name", "file", "line"]

    __typenames__ = ["builtin_interfaces.Time", "byte", "string", "string", "string", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None]

    timestamp: builtin_interfaces.Time
    level: 'byte'
    message: 'string'
    name: 'string'
    file: 'string'
    line: 'int32_t'

    UNKNOWN = 0
    DEBUG = 1
    INFO = 2
    WARNING = 3
    ERROR = 4
    FATAL = 5

    def __init__(self, timestamp=builtin_interfaces.Time(), level=0, message="", name="", file="", line=0):
        # LCM Type: builtin_interfaces.Time
        self.timestamp = timestamp
        # LCM Type: byte
        self.level = level
        # LCM Type: string
        self.message = message
        # LCM Type: string
        self.name = name
        # LCM Type: string
        self.file = file
        # LCM Type: int32_t
        self.line = line

    def lcm_encode(self):
        buf = BytesIO()
        buf.write(Log._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.timestamp._get_packed_fingerprint() == builtin_interfaces.Time._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        buf.write(struct.pack(">B", self.level))
        __message_encoded = self.message.encode('utf-8')
        buf.write(struct.pack('>I', len(__message_encoded)+1))
        buf.write(__message_encoded)
        buf.write(b"\0")
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        __file_encoded = self.file.encode('utf-8')
        buf.write(struct.pack('>I', len(__file_encoded)+1))
        buf.write(__file_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.line))

    @classmethod
    def lcm_decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = cls()
        self.timestamp = cls._get_field_type('timestamp')._decode_one(buf)
        self.level = struct.unpack(">B", buf.read(1))[0]
        __message_len = struct.unpack('>I', buf.read(4))[0]
        self.message = buf.read(__message_len)[:-1].decode('utf-8', 'replace')
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        __file_len = struct.unpack('>I', buf.read(4))[0]
        self.file = buf.read(__file_len)[:-1].decode('utf-8', 'replace')
        self.line = struct.unpack(">i", buf.read(4))[0]
        return self

    @classmethod
    def _get_field_type(cls, field_name):
        """Get the type for a field from annotations."""
        annotation = cls.__annotations__.get(field_name)
        if annotation is None:
            return None
        if isinstance(annotation, str):
            module = sys.modules[cls.__module__]
            if hasattr(module, annotation):
                return getattr(module, annotation)
            return None
        return annotation

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x623dae456e90a1c7+ builtin_interfaces.Time._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

