"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import std_msgs
class VisionInfo(object):

    msg_name = "VisionInfo"

    __slots__ = ["header", "method", "database_location", "database_version"]

    __typenames__ = ["std_msgs.Header", "string", "string", "int32_t"]

    __dimensions__ = [None, None, None, None]

    def __init__(self, header=std_msgs.Header(), method="", database_location="", database_version=0):
        # LCM Type: std_msgs.Header
        self.header = header
        # LCM Type: string
        self.method = method
        # LCM Type: string
        self.database_location = database_location
        # LCM Type: int32_t
        self.database_version = database_version

    def encode(self):
        buf = BytesIO()
        buf.write(VisionInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == std_msgs.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        __method_encoded = self.method.encode('utf-8')
        buf.write(struct.pack('>I', len(__method_encoded)+1))
        buf.write(__method_encoded)
        buf.write(b"\0")
        __database_location_encoded = self.database_location.encode('utf-8')
        buf.write(struct.pack('>I', len(__database_location_encoded)+1))
        buf.write(__database_location_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.database_version))

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = VisionInfo()
        self.header = std_msgs.Header._decode_one(buf)
        __method_len = struct.unpack('>I', buf.read(4))[0]
        self.method = buf.read(__method_len)[:-1].decode('utf-8', 'replace')
        __database_location_len = struct.unpack('>I', buf.read(4))[0]
        self.database_location = buf.read(__database_location_len)[:-1].decode('utf-8', 'replace')
        self.database_version = struct.unpack(">i", buf.read(4))[0]
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x62c1cbfdc2184fbb+ std_msgs.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

