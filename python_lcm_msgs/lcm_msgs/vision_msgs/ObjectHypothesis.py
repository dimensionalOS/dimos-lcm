"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class ObjectHypothesis(object):

    __slots__ = ["class_id", "score"]

    __typenames__ = ["string", "double"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.class_id = ""
        """ LCM Type: string """
        self.score = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(ObjectHypothesis._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __class_id_encoded = self.class_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__class_id_encoded)+1))
        buf.write(__class_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.score))

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = ObjectHypothesis()
        __class_id_len = struct.unpack('>I', buf.read(4))[0]
        self.class_id = buf.read(__class_id_len)[:-1].decode('utf-8', 'replace')
        self.score = struct.unpack(">d", buf.read(8))[0]
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        tmphash = (0x38c9acd543138b22) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

