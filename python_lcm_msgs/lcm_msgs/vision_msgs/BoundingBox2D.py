"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from . import *
from .Pose2D import Pose2D
class BoundingBox2D(object):

    msg_name = "BoundingBox2D"

    __slots__ = ["center", "size_x", "size_y"]

    __typenames__ = ["Pose2D", "double", "double"]

    __dimensions__ = [None, None, None]

    def __init__(self, center=Pose2D(), size_x=0.0, size_y=0.0):
        # LCM Type: Pose2D
        self.center = center
        # LCM Type: double
        self.size_x = size_x
        # LCM Type: double
        self.size_y = size_y

    def encode(self):
        buf = BytesIO()
        buf.write(BoundingBox2D._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.center._get_packed_fingerprint() == Pose2D._get_packed_fingerprint()
        self.center._encode_one(buf)
        buf.write(struct.pack(">dd", self.size_x, self.size_y))

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = BoundingBox2D()
        self.center = Pose2D._decode_one(buf)
        self.size_x, self.size_y = struct.unpack(">dd", buf.read(16))
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0xe2274ad6240f1c77+ Pose2D._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

