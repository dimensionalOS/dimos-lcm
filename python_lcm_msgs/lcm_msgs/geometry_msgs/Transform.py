"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import lcm_msgs.geometry_msgs as geometry_msgs

class Transform(object):

    msg_name = "geometry_msgs.Transform"

    __slots__ = ["translation", "rotation"]

    __typenames__ = ["geometry_msgs.Vector3", "geometry_msgs.Quaternion"]

    __dimensions__ = [None, None]

    def __init__(self, translation=geometry_msgs.Vector3(), rotation=geometry_msgs.Quaternion()):
        # LCM Type: geometry_msgs.Vector3
        self.translation = translation
        # LCM Type: geometry_msgs.Quaternion
        self.rotation = rotation

    def encode(self):
        buf = BytesIO()
        buf.write(Transform._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.translation._get_packed_fingerprint() == geometry_msgs.Vector3._get_packed_fingerprint()
        self.translation._encode_one(buf)
        assert self.rotation._get_packed_fingerprint() == geometry_msgs.Quaternion._get_packed_fingerprint()
        self.rotation._encode_one(buf)

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = Transform()
        self.translation = geometry_msgs.Vector3._decode_one(buf)
        self.rotation = geometry_msgs.Quaternion._decode_one(buf)
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x1275bd1ccbdaf47f+ geometry_msgs.Vector3._get_hash_recursive(newparents)+ geometry_msgs.Quaternion._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

