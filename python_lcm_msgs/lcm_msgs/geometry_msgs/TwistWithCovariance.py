"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct
import sys

from . import *
from .Twist import Twist
class TwistWithCovariance(object):

    msg_name = "TwistWithCovariance"

    __slots__ = ["twist", "covariance"]

    __typenames__ = ["Twist", "double"]

    __dimensions__ = [None, [36]]

    twist: Twist
    covariance: 'double'

    def __init__(self, twist=Twist(), covariance=[ 0.0 for dim0 in range(36) ]):
        # LCM Type: Twist
        self.twist = twist
        # LCM Type: double[36]
        self.covariance = covariance

    def lcm_encode(self):
        buf = BytesIO()
        buf.write(TwistWithCovariance._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.twist._get_packed_fingerprint() == Twist._get_packed_fingerprint()
        self.twist._encode_one(buf)
        buf.write(struct.pack('>36d', *self.covariance[:36]))

    @classmethod
    def lcm_decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = cls()
        self.twist = cls._get_field_type('twist')._decode_one(buf)
        self.covariance = struct.unpack('>36d', buf.read(288))
        return self

    @classmethod
    def _get_field_type(cls, field_name):
        """Get the type for a field from annotations."""
        annotation = cls.__annotations__.get(field_name)
        if annotation is None:
            return None
        if isinstance(annotation, str):
            module = sys.modules[cls.__module__]
            if hasattr(module, annotation):
                return getattr(module, annotation)
            return None
        return annotation

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0xaba0a9d55e98da5d+ Twist._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

