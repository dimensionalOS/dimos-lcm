"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct
import sys

from . import *
from .MultiArrayDimension import MultiArrayDimension
class MultiArrayLayout(object):

    msg_name = "std_msgs.MultiArrayLayout"

    __slots__ = ["dim_length", "dim", "data_offset"]

    __typenames__ = ["int32_t", "MultiArrayDimension", "int32_t"]

    __dimensions__ = [None, ["dim_length"], None]

    dim_length: 'int32_t'
    dim: MultiArrayDimension
    data_offset: 'int32_t'

    def __init__(self, dim_length=0, dim=[], data_offset=0):
        # LCM Type: int32_t
        self.dim_length = dim_length
        # LCM Type: MultiArrayDimension[dim_length]
        self.dim = dim
        # LCM Type: int32_t
        self.data_offset = data_offset

    def lcm_encode(self):
        buf = BytesIO()
        buf.write(MultiArrayLayout._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.dim_length))
        for i0 in range(self.dim_length):
            assert self.dim[i0]._get_packed_fingerprint() == MultiArrayDimension._get_packed_fingerprint()
            self.dim[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.data_offset))

    @classmethod
    def lcm_decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = cls()
        self.dim_length = struct.unpack(">i", buf.read(4))[0]
        self.dim = []
        for i0 in range(self.dim_length):
            self.dim.append(cls._get_field_type('dim')._decode_one(buf))
        self.data_offset = struct.unpack(">i", buf.read(4))[0]
        return self

    @classmethod
    def _get_field_type(cls, field_name):
        """Get the type for a field from annotations."""
        annotation = cls.__annotations__.get(field_name)
        if annotation is None:
            return None
        if isinstance(annotation, str):
            module = sys.modules[cls.__module__]
            if hasattr(module, annotation):
                return getattr(module, annotation)
            return None
        return annotation

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0xbf4b5363481d321+ MultiArrayDimension._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

