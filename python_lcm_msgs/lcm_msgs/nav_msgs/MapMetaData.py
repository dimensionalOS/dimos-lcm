"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

from lcm_msgs import geometry_msgs
from lcm_msgs import std_msgs
class MapMetaData(object):

    msg_name = "MapMetaData"

    __slots__ = ["map_load_time", "resolution", "width", "height", "origin"]

    __typenames__ = ["std_msgs.Time", "float", "int32_t", "int32_t", "geometry_msgs.Pose"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self, map_load_time=std_msgs.Time(), resolution=0.0, width=0, height=0, origin=geometry_msgs.Pose()):
        # LCM Type: std_msgs.Time
        self.map_load_time = map_load_time
        # LCM Type: float
        self.resolution = resolution
        # LCM Type: int32_t
        self.width = width
        # LCM Type: int32_t
        self.height = height
        # LCM Type: geometry_msgs.Pose
        self.origin = origin

    def encode(self):
        buf = BytesIO()
        buf.write(MapMetaData._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.map_load_time._get_packed_fingerprint() == std_msgs.Time._get_packed_fingerprint()
        self.map_load_time._encode_one(buf)
        buf.write(struct.pack(">fii", self.resolution, self.width, self.height))
        assert self.origin._get_packed_fingerprint() == geometry_msgs.Pose._get_packed_fingerprint()
        self.origin._encode_one(buf)

    @classmethod
    def decode(cls, data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != cls._get_packed_fingerprint():
            raise ValueError("Decode error")
        return cls._decode_one(buf)

    @classmethod
    def _decode_one(cls, buf):
        self = MapMetaData()
        self.map_load_time = std_msgs.Time._decode_one(buf)
        self.resolution, self.width, self.height = struct.unpack(">fii", buf.read(12))
        self.origin = geometry_msgs.Pose._decode_one(buf)
        return self

    @classmethod
    def _get_hash_recursive(cls, parents):
        if cls in parents: return 0
        newparents = parents + [cls]
        tmphash = (0x3245f3cdb468ba93+ std_msgs.Time._get_hash_recursive(newparents)+ geometry_msgs.Pose._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @classmethod
    def _get_packed_fingerprint(cls):
        if cls._packed_fingerprint is None:
            cls._packed_fingerprint = struct.pack(">Q", cls._get_hash_recursive([]))
        return cls._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", cls._get_packed_fingerprint())[0]

